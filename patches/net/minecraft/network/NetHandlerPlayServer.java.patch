--- a/net/minecraft/network/NetHandlerPlayServer.java
+++ b/net/minecraft/network/NetHandlerPlayServer.java
@@ -2,6 +2,9 @@
 
 import com.google.common.base.Charsets;
 import com.google.common.collect.Lists;
+import com.mtbs3d.minecrift.api.NetworkHelper;
+import com.mtbs3d.minecrift.api.NetworkHelper.PacketDiscriminators;
+
 import io.netty.buffer.Unpooled;
 import io.netty.util.concurrent.Future;
 import io.netty.util.concurrent.GenericFutureListener;
@@ -14,6 +17,7 @@
 import java.util.Random;
 import java.util.concurrent.Callable;
 import net.minecraft.block.material.Material;
+import net.minecraft.client.Minecraft;
 import net.minecraft.command.server.CommandBlockLogic;
 import net.minecraft.crash.CrashReport;
 import net.minecraft.crash.CrashReportCategory;
@@ -58,14 +62,7 @@
 import net.minecraft.network.play.client.C15PacketClientSettings;
 import net.minecraft.network.play.client.C16PacketClientStatus;
 import net.minecraft.network.play.client.C17PacketCustomPayload;
-import net.minecraft.network.play.server.S00PacketKeepAlive;
-import net.minecraft.network.play.server.S02PacketChat;
-import net.minecraft.network.play.server.S08PacketPlayerPosLook;
-import net.minecraft.network.play.server.S23PacketBlockChange;
-import net.minecraft.network.play.server.S2FPacketSetSlot;
-import net.minecraft.network.play.server.S32PacketConfirmTransaction;
-import net.minecraft.network.play.server.S3APacketTabComplete;
-import net.minecraft.network.play.server.S40PacketDisconnect;
+import net.minecraft.network.play.server.*;
 import net.minecraft.server.MinecraftServer;
 import net.minecraft.server.management.UserListBansEntry;
 import net.minecraft.stats.AchievementList;
@@ -291,12 +288,15 @@
                     var9 = packetIn.getPositionZ();
                     var13 = packetIn.getStance() - packetIn.getPositionY();
 
-                    if (!this.playerEntity.isPlayerSleeping() && (var13 > 1.65D || var13 < 0.1D))
+                    // VIVE START - don't check for stance changes
+                    if (!Minecraft.getMinecraft().vrSettings.vrAllowCrawling && !this.playerEntity.isPlayerSleeping() && (var13 > 1.65D || var13 < 0.1D))
                     {
                         this.kickPlayerFromServer("Illegal stance");
                         logger.warn(this.playerEntity.getCommandSenderName() + " had an illegal stance: " + var13);
                         return;
                     }
+                    // VIVE END - don't check for stance changes
+
 
                     if (Math.abs(packetIn.getPositionX()) > 3.2E7D || Math.abs(packetIn.getPositionZ()) > 3.2E7D)
                     {
@@ -313,6 +313,7 @@
 
                 this.playerEntity.onUpdateEntity();
                 this.playerEntity.yOffset2 = 0.0F;
+
                 this.playerEntity.setPositionAndRotation(this.lastPosX, this.lastPosY, this.lastPosZ, var11, var12);
 
                 if (!this.hasMoved)
@@ -336,7 +337,7 @@
                 }
 
                 float var27 = 0.0625F;
-                boolean var28 = var2.getCollidingBoundingBoxes(this.playerEntity, this.playerEntity.boundingBox.copy().contract((double)var27, (double)var27, (double)var27)).isEmpty();
+                boolean emptyBeforeMove = var2.getCollidingBoundingBoxes(this.playerEntity, this.playerEntity.boundingBox.copy().contract((double)var27, (double)var27, (double)var27)).isEmpty();
 
                 if (this.playerEntity.onGround && !packetIn.func_149465_i() && var15 > 0.0D)
                 {
@@ -345,6 +346,7 @@
 
                 this.playerEntity.moveEntity(var13, var15, var17);
                 this.playerEntity.onGround = packetIn.func_149465_i();
+                
                 this.playerEntity.addMovementStat(var13, var15, var17);
                 double var29 = var15;
                 var13 = var5 - this.playerEntity.posX;
@@ -357,18 +359,20 @@
 
                 var17 = var9 - this.playerEntity.posZ;
                 var25 = var13 * var13 + var15 * var15 + var17 * var17;
-                boolean var31 = false;
+                boolean wrongmove = false;
 
                 if (var25 > 0.0625D && !this.playerEntity.isPlayerSleeping() && !this.playerEntity.theItemInWorldManager.isCreative())
                 {
-                    var31 = true;
-                    logger.warn(this.playerEntity.getCommandSenderName() + " moved wrongly!");
+                    //VIVE START - remove movement warning from integrated server.
+                    //wrongmove = true;
+                    //logger.warn(this.playerEntity.getCommandSenderName() + " moved wrongly!");
+                    //VIVE END - remove movement warning
                 }
 
                 this.playerEntity.setPositionAndRotation(var5, var7, var9, var11, var12);
-                boolean var32 = var2.getCollidingBoundingBoxes(this.playerEntity, this.playerEntity.boundingBox.copy().contract((double)var27, (double)var27, (double)var27)).isEmpty();
+                boolean emptyAfterMove = var2.getCollidingBoundingBoxes(this.playerEntity, this.playerEntity.boundingBox.copy().contract((double)var27, (double)var27, (double)var27)).isEmpty();
 
-                if (var28 && (var31 || !var32) && !this.playerEntity.isPlayerSleeping())
+                if (emptyBeforeMove && (wrongmove || !emptyAfterMove) && !this.playerEntity.isPlayerSleeping())
                 {
                     this.setPlayerLocation(this.lastPosX, this.lastPosY, this.lastPosZ, var11, var12);
                     return;
@@ -1129,20 +1133,20 @@
             {
                 var3 = var2.readItemStackFromBuffer();
 
-                if (var3 != null)
+                if (var3 == null)
                 {
-                    if (!ItemWritableBook.validBookPageTagContents(var3.getTagCompound()))
-                    {
-                        throw new IOException("Invalid book tag!");
-                    }
+                    return;
+                }
 
-                    var4 = this.playerEntity.inventory.getCurrentItem();
+                if (!ItemWritableBook.validBookPageTagContents(var3.getTagCompound()))
+                {
+                    throw new IOException("Invalid book tag!");
+                }
 
-                    if (var4 == null)
-                    {
-                        return;
-                    }
+                var4 = this.playerEntity.inventory.getCurrentItem();
 
+                if (var4 != null)
+                {
                     if (var3.getItem() == Items.writable_book && var3.getItem() == var4.getItem())
                     {
                         var4.setTagInfo("pages", var3.getTagCompound().getTagList("pages", 8));
@@ -1333,6 +1337,24 @@
                     var41.updateItemName("");
                 }
             }
+            // VIVE START - client querying if server is running this mod too
+            else if ("Vivecraft".equals(packetIn.getChannel()))
+            {
+            	PacketDiscriminators dis = PacketDiscriminators.values()[packetIn.getData()[0]];
+            	
+            	switch (dis){
+            	case VERSION:
+                	String ver = Minecraft.getMinecraft().minecriftVerString;
+                	sendPacket(NetworkHelper.getVivecraftServerPacket(PacketDiscriminators.VERSION,ver.getBytes(Charsets.UTF_8)));
+                	sendPacket(NetworkHelper.getVivecraftServerPacket(PacketDiscriminators.REQUESTDATA, new byte[]{}));  
+
+            		break;
+            		
+            	default:
+            		break;
+            	}
+            }
+            // VIVE END - vivecraft packets
         }
     }
 
