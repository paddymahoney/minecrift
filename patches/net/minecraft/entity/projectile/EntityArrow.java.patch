--- a/net/minecraft/entity/projectile/EntityArrow.java
+++ b/net/minecraft/entity/projectile/EntityArrow.java
@@ -1,8 +1,13 @@
 package net.minecraft.entity.projectile;
 
 import java.util.List;
+
+import de.fruitfly.ovr.structs.Matrix4f;
+import de.fruitfly.ovr.structs.Vector3f;
 import net.minecraft.block.Block;
 import net.minecraft.block.material.Material;
+import net.minecraft.client.Minecraft;
+import net.minecraft.client.entity.EntityPlayerSP;
 import net.minecraft.enchantment.EnchantmentHelper;
 import net.minecraft.entity.Entity;
 import net.minecraft.entity.EntityLivingBase;
@@ -92,28 +97,65 @@
         }
     }
 
-    public EntityArrow(World p_i1756_1_, EntityLivingBase p_i1756_2_, float p_i1756_3_)
+    public EntityArrow(World world, EntityLivingBase shooter, float damage_)
     {
-        super(p_i1756_1_);
+        super(world);
         this.renderDistanceWeight = 10.0D;
-        this.shootingEntity = p_i1756_2_;
+        this.shootingEntity = shooter;
 
-        if (p_i1756_2_ instanceof EntityPlayer)
+        if (shooter instanceof EntityPlayer)
         {
             this.canBePickedUp = 1;
         }
-
-        this.setSize(0.5F, 0.5F);
-        this.setLocationAndAngles(p_i1756_2_.posX, p_i1756_2_.posY + (double)p_i1756_2_.getEyeHeight(), p_i1756_2_.posZ, p_i1756_2_.rotationYaw, p_i1756_2_.rotationPitch);
-        this.posX -= (double)(MathHelper.cos(this.rotationYaw / 180.0F * (float)Math.PI) * 0.16F);
-        this.posY -= 0.10000000149011612D;
-        this.posZ -= (double)(MathHelper.sin(this.rotationYaw / 180.0F * (float)Math.PI) * 0.16F);
+  
+        //JRBUDDA VIVE
+        Vec3 spawnPosition = shooter.getPosition(1);
+        spawnPosition.yCoord += shooter.getEyeHeight();
+        
+        float yaw = shooter.rotationYaw;
+        float pitch = shooter.rotationPitch;
+     
+     
+        if (shooter instanceof EntityPlayer)
+        {
+        	
+            Vec3 aimSource = Minecraft.getMinecraft().roomScale.getControllerPos_World(1);
+//        	Matrix4f aimRotation = Minecraft.getMinecraft().lookaimController.getAimRotation(0);
+//            //Matrix4f tilt = OpenVRUtil.rotationXMatrix((float)Math.PI * -0.0f);
+//            //aimRotation = Matrix4f.multiply(aimRotation, tilt);
+//            Vector3f forward = new Vector3f(0,0,1);
+//            Vector3f controllerDirection = aimRotation.transform(forward);
+            
+            Vec3 controllerDirection = Minecraft.getMinecraft().bowTracker.getAimVector();
+  
+            if(controllerDirection!=null){
+            	pitch = -(float)Math.toDegrees(Math.asin(controllerDirection.yCoord/controllerDirection.lengthVector()));
+            	yaw = -(float)Math.toDegrees(Math.atan2(controllerDirection.xCoord, controllerDirection.zCoord));        	
+            }
+         
+            spawnPosition.xCoord = aimSource.xCoord + controllerDirection.xCoord * 0.1f;
+            spawnPosition.yCoord = aimSource.yCoord + controllerDirection.yCoord * 0.1f;
+            spawnPosition.zCoord = aimSource.zCoord + controllerDirection.zCoord * 0.1f;
+      	
+            if(!Minecraft.getMinecraft().vrSettings.seated){
+            	damage_ = (float) (Minecraft.getMinecraft().bowTracker.getDrawPercent() * 1.4f);
+           	   this.setDamage(4f);
+            }
+        }
+    
+        this.setLocationAndAngles(spawnPosition.xCoord, spawnPosition.yCoord ,spawnPosition.zCoord, yaw, pitch);
+        //END VIVE
+        
+        this.setSize(0.5F, 0.5F);    
+    //    this.posX -= (double)(MathHelper.cos(this.rotationYaw / 180.0F * (float)Math.PI) * 0.16F);
+     //   this.posY -= 0.10000000149011612D;
+     //   this.posZ -= (double)(MathHelper.sin(this.rotationYaw / 180.0F * (float)Math.PI) * 0.16F);
         this.setPosition(this.posX, this.posY, this.posZ);
         this.yOffset = 0.0F;
         this.motionX = (double)(-MathHelper.sin(this.rotationYaw / 180.0F * (float)Math.PI) * MathHelper.cos(this.rotationPitch / 180.0F * (float)Math.PI));
         this.motionZ = (double)(MathHelper.cos(this.rotationYaw / 180.0F * (float)Math.PI) * MathHelper.cos(this.rotationPitch / 180.0F * (float)Math.PI));
         this.motionY = (double)(-MathHelper.sin(this.rotationPitch / 180.0F * (float)Math.PI));
-        this.setThrowableHeading(this.motionX, this.motionY, this.motionZ, p_i1756_3_ * 1.5F, 1.0F);
+        this.setThrowableHeading(this.motionX, this.motionY, this.motionZ, damage_ * 1.5F, 1.0F);
     }
 
     protected void entityInit()
@@ -297,11 +339,11 @@
                 if (var4.entityHit != null)
                 {
                     var20 = MathHelper.sqrt_double(this.motionX * this.motionX + this.motionY * this.motionY + this.motionZ * this.motionZ);
-                    int var21 = MathHelper.ceiling_double_int((double)var20 * this.damage);
+                    int hitdamage = MathHelper.ceiling_double_int((double)var20 * this.damage);
 
                     if (this.getIsCritical())
                     {
-                        var21 += this.rand.nextInt(var21 / 2 + 2);
+                        hitdamage += this.rand.nextInt(hitdamage / 2 + 2);
                     }
 
                     DamageSource var23 = null;
@@ -320,7 +362,7 @@
                         var4.entityHit.setFire(5);
                     }
 
-                    if (var4.entityHit.attackEntityFrom(var23, (float)var21))
+                    if (var4.entityHit.attackEntityFrom(var23, (float)hitdamage))
                     {
                         if (var4.entityHit instanceof EntityLivingBase)
                         {
