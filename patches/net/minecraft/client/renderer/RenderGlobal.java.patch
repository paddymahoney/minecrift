--- a/net/minecraft/client/renderer/RenderGlobal.java
+++ b/net/minecraft/client/renderer/RenderGlobal.java
@@ -1,6 +1,5 @@
 package net.minecraft.client.renderer;
 
-import com.google.common.collect.Maps;
 import java.nio.IntBuffer;
 import java.util.ArrayList;
 import java.util.Arrays;
@@ -10,10 +9,24 @@
 import java.util.Map;
 import java.util.Random;
 import java.util.concurrent.Callable;
+
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+import org.lwjgl.BufferUtils;
+import org.lwjgl.input.Mouse;
+import org.lwjgl.opengl.ARBOcclusionQuery;
+import org.lwjgl.opengl.GL11;
+
+import com.google.common.collect.Maps;
+import com.mtbs3d.minecrift.render.RenderVRPlayer;
+import com.mtbs3d.minecrift.settings.VRSettings;
+
+import de.fruitfly.ovr.enums.EyeType;
 import net.minecraft.block.Block;
 import net.minecraft.block.BlockChest;
 import net.minecraft.block.material.Material;
 import net.minecraft.client.Minecraft;
+import net.minecraft.client.Minecraft.renderPass;
 import net.minecraft.client.audio.ISound;
 import net.minecraft.client.audio.PositionedSoundRecord;
 import net.minecraft.client.entity.EntityClientPlayerMP;
@@ -88,12 +101,6 @@
 import net.minecraft.util.Vec3;
 import net.minecraft.world.IWorldAccess;
 import net.minecraft.world.WorldProvider;
-import org.apache.logging.log4j.LogManager;
-import org.apache.logging.log4j.Logger;
-import org.lwjgl.BufferUtils;
-import org.lwjgl.input.Mouse;
-import org.lwjgl.opengl.ARBOcclusionQuery;
-import org.lwjgl.opengl.GL11;
 
 public class RenderGlobal implements IWorldAccess
 {
@@ -109,7 +116,9 @@
     public final TextureManager renderEngine;
     public CompactArrayList worldRenderersToUpdate = new CompactArrayList(100, 0.8F);
     private WorldRenderer[] sortedWorldRenderers;
-    private WorldRenderer[] worldRenderers;
+    /** MINECRIFT SHADERS MOD */
+    public WorldRenderer[] worldRenderers;
+    /** END MINECRIFT SHADERS MOD */
     private int renderChunksWide;
     private int renderChunksTall;
     private int renderChunksDeep;
@@ -266,6 +275,10 @@
     private long lastActionTime = System.currentTimeMillis();
     private static AxisAlignedBB AABB_INFINITE = AxisAlignedBB.getBoundingBox(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
 
+    //VIVECRAFT
+    RenderVRPlayer renderplayer = new RenderVRPlayer();
+    //end VIVECRAFT
+    
     public RenderGlobal(Minecraft par1Minecraft)
     {
         this.glListClouds = GLAllocation.generateDisplayLists(1);
@@ -290,18 +303,26 @@
             ARBOcclusionQuery.glGenQueriesARB(this.glOcclusionQueryBase);
         }
 
-        this.starGLCallList = GLAllocation.generateDisplayLists(3);
+        setupSkybox();
+    }
+
+	public void setupSkybox() {
+		this.starGLCallList = GLAllocation.generateDisplayLists(3);
         GL11.glPushMatrix();
-        GL11.glNewList(this.starGLCallList, GL11.GL_COMPILE);
-        this.renderStars();
-        GL11.glEndList();
+	        GL11.glNewList(this.starGLCallList, GL11.GL_COMPILE);
+	        	this.renderStars();
+	        GL11.glEndList();
         GL11.glPopMatrix();
+        
         Tessellator var4 = Tessellator.instance;
         this.glSkyList = this.starGLCallList + 1;
         GL11.glNewList(this.glSkyList, GL11.GL_COMPILE);
+
+        //odd way to say '6' lol
         byte var6 = 64;
-        int var7 = 256 / var6 + 2;
-        float var5 = 16.0F;
+//        int var7 = 256 / var6 + 2;
+        int var7 = 6;
+        float var5 = 16.0F ;
         int var8;
         int var9;
 
@@ -321,7 +342,7 @@
         GL11.glEndList();
         this.glSkyList2 = this.starGLCallList + 2;
         GL11.glNewList(this.glSkyList2, GL11.GL_COMPILE);
-        var5 = -16.0F;
+        var5 = -16.0F ;
         var4.startDrawingQuads();
 
         for (var8 = -var6 * var7; var8 <= var6 * var7; var8 += var6)
@@ -337,7 +358,7 @@
 
         var4.draw();
         GL11.glEndList();
-    }
+	}
 
     private void renderStars()
     {
@@ -359,9 +380,9 @@
                 var4 *= var12;
                 var6 *= var12;
                 var8 *= var12;
-                double var14 = var4 * 100.0D;
-                double var16 = var6 * 100.0D;
-                double var18 = var8 * 100.0D;
+                double var14 = var4 * 100.0D ;
+                double var16 = var6 * 100.0D ;
+                double var18 = var8 * 100.0D ;
                 double var20 = Math.atan2(var4, var8);
                 double var22 = Math.sin(var20);
                 double var24 = Math.cos(var20);
@@ -550,7 +571,7 @@
     /**
      * Renders all entities within range and within the frustrum. Args: pos, frustrum, partialTickTime
      */
-    public void renderEntities(EntityLivingBase p_147589_1_, ICamera p_147589_2_, float p_147589_3_)
+    public void renderEntities(EntityLivingBase p_147589_1_, ICamera p_147589_2_, float nano)
     {
         int pass = 0;
 
@@ -573,12 +594,12 @@
         }
         else
         {
-            double var4 = p_147589_1_.prevPosX + (p_147589_1_.posX - p_147589_1_.prevPosX) * (double)p_147589_3_;
-            double var6 = p_147589_1_.prevPosY + (p_147589_1_.posY - p_147589_1_.prevPosY) * (double)p_147589_3_;
-            double var8 = p_147589_1_.prevPosZ + (p_147589_1_.posZ - p_147589_1_.prevPosZ) * (double)p_147589_3_;
+            double var4 = p_147589_1_.prevPosX + (p_147589_1_.posX - p_147589_1_.prevPosX) * (double)nano;
+            double var6 = p_147589_1_.prevPosY + (p_147589_1_.posY - p_147589_1_.prevPosY) * (double)nano;
+            double var8 = p_147589_1_.prevPosZ + (p_147589_1_.posZ - p_147589_1_.prevPosZ) * (double)nano;
             this.theWorld.theProfiler.startSection("prepare");
-            TileEntityRendererDispatcher.instance.cacheActiveRenderInfo(this.theWorld, this.mc.getTextureManager(), this.mc.fontRendererObj, this.mc.renderViewEntity, p_147589_3_);
-            RenderManager.instance.cacheActiveRenderInfo(this.theWorld, this.mc.getTextureManager(), this.mc.fontRendererObj, this.mc.renderViewEntity, this.mc.pointedEntity, this.mc.gameSettings, p_147589_3_);
+            TileEntityRendererDispatcher.instance.cacheActiveRenderInfo(this.theWorld, this.mc.getTextureManager(), this.mc.fontRendererObj, this.mc.renderViewEntity, nano);
+            RenderManager.instance.cacheActiveRenderInfo(this.theWorld, this.mc.getTextureManager(), this.mc.fontRendererObj, this.mc.renderViewEntity, this.mc.pointedEntity, this.mc.gameSettings, nano);
 
             if (pass == 0)
             {
@@ -587,9 +608,9 @@
                 this.countEntitiesHidden = 0;
                 this.countTileEntitiesRendered = 0;
                 EntityLivingBase var17 = this.mc.renderViewEntity;
-                double var18 = var17.lastTickPosX + (var17.posX - var17.lastTickPosX) * (double)p_147589_3_;
-                double oldFancyGraphics = var17.lastTickPosY + (var17.posY - var17.lastTickPosY) * (double)p_147589_3_;
-                double aabb = var17.lastTickPosZ + (var17.posZ - var17.lastTickPosZ) * (double)p_147589_3_;
+                double var18 = var17.lastTickPosX + (var17.posX - var17.lastTickPosX) * (double)nano;
+                double oldFancyGraphics = var17.lastTickPosY + (var17.posY - var17.lastTickPosY) * (double)nano;
+                double aabb = var17.lastTickPosZ + (var17.posZ - var17.lastTickPosZ) * (double)nano;
                 TileEntityRendererDispatcher.staticPlayerX = var18;
                 TileEntityRendererDispatcher.staticPlayerY = oldFancyGraphics;
                 TileEntityRendererDispatcher.staticPlayerZ = aabb;
@@ -613,7 +634,7 @@
                 RenderManager.renderPosZ = aabb;
             }
 
-            this.mc.entityRenderer.enableLightmap((double)p_147589_3_);
+            this.mc.entityRenderer.enableLightmap((double)nano);
             this.theWorld.theProfiler.endStartSection("global");
             List var24 = this.theWorld.getLoadedEntityList();
 
@@ -640,15 +661,23 @@
 
                     if (var19.isInRangeToRender3d(var4, var6, var8))
                     {
-                        RenderManager.instance.renderEntitySimple(var19, p_147589_3_);
+                        RenderManager.instance.renderEntitySimple(var19, nano);
                     }
                 }
             }
-
             this.theWorld.theProfiler.endStartSection("entities");
+            /** MINECRIFT SHADERS MOD **/
+            boolean shadersMod = Reflector.shadersModExists();
+            if (shadersMod) {
+                //Shaders.beginEntities();
+                Reflector.callVoid(Reflector.ShadersMod_Shaders_beginEntities, new Object[] {});
+            }
             boolean var26 = this.mc.gameSettings.fancyGraphics;
             this.mc.gameSettings.fancyGraphics = Config.isDroppedItemsFancy();
 
+            /** MINECRIFT */ // logic to determine whether to render head, headwear etc...
+            Entity thePlayer = null;
+      //      RenderPlayer renderPlayer = (RenderPlayer)RenderManager.instance.getEntityRenderObject(this.mc.thePlayer);
             for (var25 = 0; var25 < var24.size(); ++var25)
             {
                 var19 = (Entity)var24.get(var25);
@@ -668,24 +697,51 @@
                         }
                     }
 
-                    if (te && (var19 != this.mc.renderViewEntity || this.mc.gameSettings.thirdPersonView != 0 || this.mc.renderViewEntity.isPlayerSleeping()) && this.theWorld.blockExists(MathHelper.floor_double(var19.posX), 0, MathHelper.floor_double(var19.posZ)))
+                    if (te && (var19 == this.mc.renderViewEntity && this.mc.gameSettings.thirdPersonView == 0 && !mc.renderViewEntity.isPlayerSleeping()) && this.theWorld.blockExists(MathHelper.floor_double(var19.posX), 0, MathHelper.floor_double(var19.posZ)))
                     {
-                        ++this.countEntitiesRendered;
+                        if (this.mc.vrSettings.renderFullFirstPersonModelMode == VRSettings.RENDER_FIRST_PERSON_HAND ||
+                            this.mc.vrSettings.renderFullFirstPersonModelMode == VRSettings.RENDER_FIRST_PERSON_NONE)
+                        {
+                            te = false;
+                        }
+                        else
+                        {
+                            thePlayer = var19;
+                        }
+                    }
 
+                    if (te)
+                    {
                         if (var19.getClass() == EntityItemFrame.class)
                         {
                             var19.renderDistanceWeight = 0.06D;
                         }
 
-                        this.renderedEntity = var19;
-                        RenderManager.instance.renderEntitySimple(var19, p_147589_3_);
-                        this.renderedEntity = null;
+                        if (thePlayer != var19)
+                        {
+                            ++this.countEntitiesRendered;
+                            this.renderedEntity = var19;
+                            if (shadersMod) {
+                                //Shaders.nextEntity();
+                                Reflector.callVoid(Reflector.ShadersMod_Shaders_nextEntity, new Object[] {});
+                            }
+                            RenderManager.instance.renderEntitySimple(var19, nano);
+                            this.renderedEntity = null;
+                        }
                     }
                 }
             }
+			/** END MINECRIFT */
 
             this.mc.gameSettings.fancyGraphics = var26;
             this.theWorld.theProfiler.endStartSection("blockentities");
+            if (shadersMod) {
+                //Shaders.endEntities();
+                //Shaders.beginBlockEntities();
+                Reflector.callVoid(Reflector.ShadersMod_Shaders_endEntities, new Object[] {});
+                Reflector.callVoid(Reflector.ShadersMod_Shaders_beginBlockEntities, new Object[] {});
+            }
+            /** END MINECRIFT SHADERS MOD **/
             RenderHelper.enableStandardItemLighting();
 
             for (var25 = 0; var25 < this.tileEntities.size(); ++var25)
@@ -709,7 +765,7 @@
                             {
                                 FontRenderer fr = TileEntityRendererDispatcher.instance.getFontRenderer();
                                 fr.enabled = false;
-                                TileEntityRendererDispatcher.instance.renderTileEntity(var27, p_147589_3_);
+                                TileEntityRendererDispatcher.instance.renderTileEntity(var27, nano);
                                 ++this.countTileEntitiesRendered;
                                 fr.enabled = true;
                                 continue;
@@ -726,14 +782,55 @@
                             }
                         }
 
-                        TileEntityRendererDispatcher.instance.renderTileEntity(var27, p_147589_3_);
+                        TileEntityRendererDispatcher.instance.renderTileEntity(var27, nano);
                         ++this.countTileEntitiesRendered;
                     }
                 }
             }
+            /** MINECRIFT SHADERS MOD **/
+            if (shadersMod) {
+                //Shaders.endBlockEntities();
+                Reflector.callVoid(Reflector.ShadersMod_Shaders_endBlockEntities, new Object[] {});
+            }
+
+            /** MINECRIFT */ // Render crosshair...
+            if (!Reflector.forgeExists())
+                this.mc.entityRenderer.disableLightmap((double)nano);
+
+            this.mc.entityRenderer.renderCrosshairAtDepth(nano);
+
+            if (!Reflector.forgeExists())
+                this.mc.entityRenderer.enableLightmap((double)nano);
+
+
+            // ...and now render the player...
+            if (thePlayer != null)
+            {
+                if (shadersMod) {
+                    Reflector.callVoid(Reflector.ShadersMod_Shaders_beginEntities, new Object[] {});
+                }
+                ++this.countEntitiesRendered;
+                renderplayer.setVR(true,this.mc.vrSettings.renderHeadWear, this.mc.vrSettings.renderPlayerOffset);
+                this.renderedEntity = thePlayer;
+                if (shadersMod) {
+                    Reflector.callVoid(Reflector.ShadersMod_Shaders_nextEntity, new Object[] {});
+                }
+                RenderManager.instance.renderEntitySimple(thePlayer, nano);
+                this.renderedEntity = null;
+                renderplayer.setVR(false,true,0.0F);
+                if (shadersMod) {
+                    Reflector.callVoid(Reflector.ShadersMod_Shaders_endEntities, new Object[] {});
+                }
+            }
 
-            this.mc.entityRenderer.disableLightmap((double)p_147589_3_);
+                
+            /** END MINECRIFT SHADERS MOD **/
+			/** END MINECRIFT */
+
+            this.mc.entityRenderer.disableLightmap((double)nano);
             this.theWorld.theProfiler.endSection();
+            
+            
         }
     }
 
@@ -1023,7 +1120,9 @@
 
         if (this.mc.gameSettings.ofSmoothFps && renderPass == 0)
         {
-            GL11.glFinish();
+        	//VIVECRAFT
+            //GL11.glFinish();
+            // UM NO PLZ
         }
 
         byte var35 = 0;
@@ -1076,14 +1175,27 @@
                     endIndex = this.countSortedWorldRenderers;
                 }
 
-                GL11.glDisable(GL11.GL_TEXTURE_2D);
+                GL11.glDisable(GL11.GL_TEXTURE_2D);  
                 GL11.glDisable(GL11.GL_LIGHTING);
                 GL11.glDisable(GL11.GL_ALPHA_TEST);
                 GL11.glDisable(GL11.GL_FOG);
+                /** MINECRIFT SHADERS MOD **/
+                
+                boolean shadersMod = Reflector.shadersModExists();
+                if (shadersMod) {
+                    //Shaders.disableTexture2D();
+                    Reflector.callVoid(Reflector.ShadersMod_Shaders_disableTexture2D, new Object[]{});
+                    Reflector.callVoid(Reflector.ShadersMod_Shaders_disableFog, new Object[] {});
+                }
+                /** END MINECRIFT SHADERS MOD **/
+                
                 GL11.glColorMask(false, false, false, false);
                 GL11.glDepthMask(false);
-                profiler.startSection("check");
-                this.checkOcclusionQueryResult(startIndex, endIndex, player.posX, player.posY, player.posZ);
+                profiler.startSection("check"); ///should this use the camera???? I think so
+                //VIVECRAFT USE CAM POS
+                	Vec3 cam = mc.entityRenderer.getEyeRenderPos(mc.currentPass);
+                	this.checkOcclusionQueryResult(startIndex, endIndex, cam.xCoord, cam.yCoord, cam.zCoord);
+                //END VIVECRAFT
                 profiler.endSection();
                 GL11.glPushMatrix();
                 float sumTX = 0.0F;
@@ -1145,9 +1257,9 @@
                                 }
 
                                 profiler.startSection("bb");
-                                ARBOcclusionQuery.glBeginQueryARB(ARBOcclusionQuery.GL_SAMPLES_PASSED_ARB, wr.glOcclusionQuery);
-                                wr.callOcclusionQueryList();
-                                ARBOcclusionQuery.glEndQueryARB(ARBOcclusionQuery.GL_SAMPLES_PASSED_ARB);
+	                                ARBOcclusionQuery.glBeginQueryARB(ARBOcclusionQuery.GL_SAMPLES_PASSED_ARB, wr.glOcclusionQuery);
+	                                wr.callOcclusionQueryList();
+	                                ARBOcclusionQuery.glEndQueryARB(ARBOcclusionQuery.GL_SAMPLES_PASSED_ARB);
                                 profiler.endSection();
                                 wr.isWaitingOnOcclusionQuery = true;
                                 ++var37;
@@ -1177,12 +1289,21 @@
                 {
                     GL11.glColorMask(true, true, true, true);
                 }
-
+                
                 GL11.glDepthMask(true);
                 GL11.glEnable(GL11.GL_TEXTURE_2D);
                 GL11.glEnable(GL11.GL_ALPHA_TEST);
                 GL11.glEnable(GL11.GL_FOG);
+                
+                /** MINECRIFT SHADERS MOD **/
+                if (shadersMod) {
+                    //Shaders.enableFog();
+                    Reflector.callVoid(Reflector.ShadersMod_Shaders_enableTexture2D, new Object[] {});
+                    Reflector.callVoid(Reflector.ShadersMod_Shaders_enableFog, new Object[] {});
+                }
+                
                 profiler.endStartSection("render");
+                /** END MINECRIFT SHADERS MOD **/
             }
         }
         else
@@ -1422,13 +1543,13 @@
 
             this.glListBuffer.flip();
             EntityLivingBase var18 = this.mc.renderViewEntity;
-            double var19 = var18.lastTickPosX + (var18.posX - var18.lastTickPosX) * partialTicks - (double)WorldRenderer.globalChunkOffsetX;
+            double partialX = var18.lastTickPosX + (var18.posX - var18.lastTickPosX) * partialTicks - (double)WorldRenderer.globalChunkOffsetX;
             double partialY = var18.lastTickPosY + (var18.posY - var18.lastTickPosY) * partialTicks;
             double partialZ = var18.lastTickPosZ + (var18.posZ - var18.lastTickPosZ) * partialTicks - (double)WorldRenderer.globalChunkOffsetZ;
             this.mc.entityRenderer.enableLightmap(partialTicks);
-            GL11.glTranslatef((float)(-var19), (float)(-partialY), (float)(-partialZ));
+            GL11.glTranslatef((float)(-partialX), (float)(-partialY), (float)(-partialZ));
             GL11.glCallLists(this.glListBuffer);
-            GL11.glTranslatef((float)var19, (float)partialY, (float)partialZ);
+            GL11.glTranslatef((float)partialX, (float)partialY, (float)partialZ);
             this.mc.entityRenderer.disableLightmap(partialTicks);
             return l;
         }
@@ -1475,7 +1596,11 @@
      */
     public void renderSky(float par1)
     {
-        if (Reflector.ForgeWorldProvider_getSkyRenderer.exists())
+        /** MINECRIFT SHADERS MOD **/
+        boolean shadersMod = Reflector.shadersModExists();
+        boolean hasForge = Reflector.forgeExists();
+        /** END MINECRIFT SHADERS MOD **/
+        if (hasForge)
         {
             WorldProvider var2 = this.mc.theWorld.provider;
             Object var3 = Reflector.call(var2, Reflector.ForgeWorldProvider_getSkyRenderer, new Object[0]);
@@ -1487,7 +1612,7 @@
             }
         }
 
-        if (this.mc.theWorld.provider.dimensionId == 1)
+        if (this.mc.theWorld.provider.dimensionId == 1) //End
         {
             if (!Config.isSkyEnabled())
             {
@@ -1495,6 +1620,10 @@
             }
 
             GL11.glDisable(GL11.GL_FOG);
+            /** MINECRIFT SHADERS MOD **/
+            if (shadersMod) {
+                Reflector.callVoid(Reflector.ShadersMod_Shaders_disableFog, new Object[] {});
+            }
             GL11.glDisable(GL11.GL_ALPHA_TEST);
             GL11.glEnable(GL11.GL_BLEND);
             OpenGlHelper.glBlendFunc(770, 771, 1, 0);
@@ -1544,13 +1673,24 @@
 
             GL11.glDepthMask(true);
             GL11.glEnable(GL11.GL_TEXTURE_2D);
+            if (shadersMod) {
+                Reflector.callVoid(Reflector.ShadersMod_Shaders_enableTexture2D, new Object[] {});
+            }
             GL11.glEnable(GL11.GL_ALPHA_TEST);
+            /** END MINECRIFT SHADERS MOD **/
         }
-        else if (this.mc.theWorld.provider.isSurfaceWorld())
+        else if (this.mc.theWorld.provider.isSurfaceWorld()) //normal
         {
+            /** MINECRIFT SHADERS MOD **/
             GL11.glDisable(GL11.GL_TEXTURE_2D);
+            if (shadersMod) {
+                Reflector.callVoid(Reflector.ShadersMod_Shaders_disableTexture2D, new Object[] {});
+            }
             Vec3 var21 = this.theWorld.getSkyColor(this.mc.renderViewEntity, par1);
             var21 = CustomColorizer.getSkyColor(var21, this.mc.theWorld, this.mc.renderViewEntity.posX, this.mc.renderViewEntity.posY + 1.0D, this.mc.renderViewEntity.posZ);
+            if (shadersMod) {
+                Reflector.callVoid(Reflector.ShadersMod_Shaders_setSkyColor, new Object[] {var21});
+            }
             float var231 = (float)var21.xCoord;
             float var4 = (float)var21.yCoord;
             float var5 = (float)var21.zCoord;
@@ -1570,186 +1710,242 @@
             Tessellator var241 = Tessellator.instance;
             GL11.glDepthMask(false);
             GL11.glEnable(GL11.GL_FOG);
-            GL11.glColor3f(var231, var4, var5);
-
-            if (Config.isSkyEnabled())
-            {
-                GL11.glCallList(this.glSkyList);
-            }
-
-            GL11.glDisable(GL11.GL_FOG);
-            GL11.glDisable(GL11.GL_ALPHA_TEST);
-            GL11.glEnable(GL11.GL_BLEND);
-            OpenGlHelper.glBlendFunc(770, 771, 1, 0);
-            RenderHelper.disableStandardItemLighting();
-            float[] var251 = this.theWorld.provider.calcSunriseSunsetColors(this.theWorld.getCelestialAngle(par1), par1);
-            float var9;
-            float var10;
-            float var11;
-            float var12;
-            float var20;
-            int var30;
-            float var16;
-            float var17;
-
-            if (var251 != null && Config.isSunMoonEnabled())
-            {
-                GL11.glDisable(GL11.GL_TEXTURE_2D);
-                GL11.glShadeModel(GL11.GL_SMOOTH);
-                GL11.glPushMatrix();
-                GL11.glRotatef(90.0F, 1.0F, 0.0F, 0.0F);
-                GL11.glRotatef(MathHelper.sin(this.theWorld.getCelestialAngleRadians(par1)) < 0.0F ? 180.0F : 0.0F, 0.0F, 0.0F, 1.0F);
-                GL11.glRotatef(90.0F, 0.0F, 0.0F, 1.0F);
-                var8 = var251[0];
-                var9 = var251[1];
-                var10 = var251[2];
-
-                if (this.mc.gameSettings.anaglyph)
-                {
-                    var11 = (var8 * 30.0F + var9 * 59.0F + var10 * 11.0F) / 100.0F;
-                    var12 = (var8 * 30.0F + var9 * 70.0F) / 100.0F;
-                    var20 = (var8 * 30.0F + var10 * 70.0F) / 100.0F;
-                    var8 = var11;
-                    var9 = var12;
-                    var10 = var20;
-                }
-
-                var241.startDrawing(6);
-                var241.setColorRGBA_F(var8, var9, var10, var251[3]);
-                var241.addVertex(0.0D, 100.0D, 0.0D);
-                byte var25 = 16;
-                var241.setColorRGBA_F(var251[0], var251[1], var251[2], 0.0F);
-
-                for (var30 = 0; var30 <= var25; ++var30)
-                {
-                    var20 = (float)var30 * (float)Math.PI * 2.0F / (float)var25;
-                    var16 = MathHelper.sin(var20);
-                    var17 = MathHelper.cos(var20);
-                    var241.addVertex((double)(var16 * 120.0F), (double)(var17 * 120.0F), (double)(-var17 * 40.0F * var251[3]));
-                }
-
-                var241.draw();
-                GL11.glPopMatrix();
-                GL11.glShadeModel(GL11.GL_FLAT);
-            }
-
-            GL11.glEnable(GL11.GL_TEXTURE_2D);
-            OpenGlHelper.glBlendFunc(770, 1, 1, 0);
-            GL11.glPushMatrix();
-            var8 = 1.0F - this.theWorld.getRainStrength(par1);
-            var9 = 0.0F;
-            var10 = 0.0F;
-            var11 = 0.0F;
-            GL11.glColor4f(1.0F, 1.0F, 1.0F, var8);
-            GL11.glTranslatef(var9, var10, var11);
-            GL11.glRotatef(-90.0F, 0.0F, 1.0F, 0.0F);
-            CustomSky.renderSky(this.theWorld, this.renderEngine, this.theWorld.getCelestialAngle(par1), var8);
-            GL11.glRotatef(this.theWorld.getCelestialAngle(par1) * 360.0F, 1.0F, 0.0F, 0.0F);
-
-            if (Config.isSunMoonEnabled())
-            {
-                var12 = 30.0F;
-                this.renderEngine.bindTexture(locationSunPng);
-                var241.startDrawingQuads();
-                var241.addVertexWithUV((double)(-var12), 100.0D, (double)(-var12), 0.0D, 0.0D);
-                var241.addVertexWithUV((double)var12, 100.0D, (double)(-var12), 1.0D, 0.0D);
-                var241.addVertexWithUV((double)var12, 100.0D, (double)var12, 1.0D, 1.0D);
-                var241.addVertexWithUV((double)(-var12), 100.0D, (double)var12, 0.0D, 1.0D);
-                var241.draw();
-                var12 = 20.0F;
-                this.renderEngine.bindTexture(locationMoonPhasesPng);
-                int var26 = this.theWorld.getMoonPhase();
-                int var27 = var26 % 4;
-                var30 = var26 / 4 % 2;
-                var16 = (float)(var27 + 0) / 4.0F;
-                var17 = (float)(var30 + 0) / 2.0F;
-                float var18 = (float)(var27 + 1) / 4.0F;
-                float var19 = (float)(var30 + 1) / 2.0F;
-                var241.startDrawingQuads();
-                var241.addVertexWithUV((double)(-var12), -100.0D, (double)var12, (double)var18, (double)var19);
-                var241.addVertexWithUV((double)var12, -100.0D, (double)var12, (double)var16, (double)var19);
-                var241.addVertexWithUV((double)var12, -100.0D, (double)(-var12), (double)var16, (double)var17);
-                var241.addVertexWithUV((double)(-var12), -100.0D, (double)(-var12), (double)var18, (double)var17);
-                var241.draw();
-            }
-
-            GL11.glDisable(GL11.GL_TEXTURE_2D);
-            var20 = this.theWorld.getStarBrightness(par1) * var8;
-
-            if (var20 > 0.0F && Config.isStarsEnabled() && !CustomSky.hasSkyLayers(this.theWorld))
-            {
-                GL11.glColor4f(var20, var20, var20, var20);
-                GL11.glCallList(this.starGLCallList);
-            }
-
-            GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
-            GL11.glDisable(GL11.GL_BLEND);
-            GL11.glEnable(GL11.GL_ALPHA_TEST);
-            GL11.glEnable(GL11.GL_FOG);
-            GL11.glPopMatrix();
-            GL11.glDisable(GL11.GL_TEXTURE_2D);
-            GL11.glColor3f(0.0F, 0.0F, 0.0F);
-            double var28 = this.mc.thePlayer.getPosition(par1).yCoord - this.theWorld.getHorizon();
-
-            if (var28 < 0.0D)
-            {
-                GL11.glPushMatrix();
-                GL11.glTranslatef(0.0F, 12.0F, 0.0F);
-                GL11.glCallList(this.glSkyList2);
-                GL11.glPopMatrix();
-                var10 = 1.0F;
-                var11 = -((float)(var28 + 65.0D));
-                var12 = -var10;
-                var241.startDrawingQuads();
-                var241.setColorRGBA_I(0, 255);
-                var241.addVertex((double)(-var10), (double)var11, (double)var10);
-                var241.addVertex((double)var10, (double)var11, (double)var10);
-                var241.addVertex((double)var10, (double)var12, (double)var10);
-                var241.addVertex((double)(-var10), (double)var12, (double)var10);
-                var241.addVertex((double)(-var10), (double)var12, (double)(-var10));
-                var241.addVertex((double)var10, (double)var12, (double)(-var10));
-                var241.addVertex((double)var10, (double)var11, (double)(-var10));
-                var241.addVertex((double)(-var10), (double)var11, (double)(-var10));
-                var241.addVertex((double)var10, (double)var12, (double)(-var10));
-                var241.addVertex((double)var10, (double)var12, (double)var10);
-                var241.addVertex((double)var10, (double)var11, (double)var10);
-                var241.addVertex((double)var10, (double)var11, (double)(-var10));
-                var241.addVertex((double)(-var10), (double)var11, (double)(-var10));
-                var241.addVertex((double)(-var10), (double)var11, (double)var10);
-                var241.addVertex((double)(-var10), (double)var12, (double)var10);
-                var241.addVertex((double)(-var10), (double)var12, (double)(-var10));
-                var241.addVertex((double)(-var10), (double)var12, (double)(-var10));
-                var241.addVertex((double)(-var10), (double)var12, (double)var10);
-                var241.addVertex((double)var10, (double)var12, (double)var10);
-                var241.addVertex((double)var10, (double)var12, (double)(-var10));
-                var241.draw();
-            }
-
-            if (this.theWorld.provider.isSkyColored())
-            {
-                GL11.glColor3f(var231 * 0.2F + 0.04F, var4 * 0.2F + 0.04F, var5 * 0.6F + 0.1F);
-            }
-            else
-            {
-                GL11.glColor3f(var231, var4, var5);
-            }
-
-            if (this.mc.gameSettings.renderDistanceChunks <= 4)
-            {
-                GL11.glColor3f(this.mc.entityRenderer.fogColorRed, this.mc.entityRenderer.fogColorGreen, this.mc.entityRenderer.fogColorBlue);
-            }
-
-            GL11.glPushMatrix();
-            GL11.glTranslatef(0.0F, -((float)(var28 - 16.0D)), 0.0F);
-
-            if (Config.isSkyEnabled())
-            {
-                GL11.glCallList(this.glSkyList2);
+            if (shadersMod) {
+                Reflector.callVoid(Reflector.ShadersMod_Shaders_enableFog, new Object[] {});
             }
+            GL11.glColor3f(var231, var4, var5);
 
-            GL11.glPopMatrix();
-            GL11.glEnable(GL11.GL_TEXTURE_2D);
+            GL11.glPushMatrix(); //VIVECRAFT render sky at infinity
+            
+	            Vec3 offsetEye = mc.entityRenderer.getEyeRenderPos(mc.currentPass).subtract(mc.entityRenderer.getEyeRenderPos(renderPass.Center));
+	            
+	           
+	            if(mc.currentPass != renderPass.Third)
+	            	GL11.glTranslated(-offsetEye.xCoord, -offsetEye.yCoord, -offsetEye.zCoord); //undo depth
+
+	            if (Config.isSkyEnabled())
+	            {
+	                if (shadersMod) {
+	                    Reflector.callVoid(Reflector.ShadersMod_Shaders_preSkyList, new Object[] {});
+	                }
+	                
+	                GL11.glCallList(this.glSkyList);
+	            }
+	
+	            GL11.glDisable(GL11.GL_FOG);
+	            if (shadersMod) {
+	                Reflector.callVoid(Reflector.ShadersMod_Shaders_disableFog, new Object[] {});
+	            }
+	            GL11.glDisable(GL11.GL_ALPHA_TEST);
+	            GL11.glEnable(GL11.GL_BLEND);
+	            OpenGlHelper.glBlendFunc(770, 771, 1, 0);
+	            RenderHelper.disableStandardItemLighting();
+	            float[] var251 = this.theWorld.provider.calcSunriseSunsetColors(this.theWorld.getCelestialAngle(par1), par1);
+	            float var9;
+	            float var10;
+	            float var11;
+	            float var12;
+	            float var20;
+	            int var30;
+	            float var16;
+	            float var17;
+	
+	            if (var251 != null && Config.isSunMoonEnabled())
+	            {
+	                GL11.glDisable(GL11.GL_TEXTURE_2D);
+	                if (shadersMod) {
+	                    Reflector.callVoid(Reflector.ShadersMod_Shaders_disableTexture2D, new Object[] {});
+	                }
+	                GL11.glShadeModel(GL11.GL_SMOOTH);
+	                GL11.glPushMatrix();
+		                GL11.glRotatef(90.0F, 1.0F, 0.0F, 0.0F);
+		                GL11.glRotatef(MathHelper.sin(this.theWorld.getCelestialAngleRadians(par1)) < 0.0F ? 180.0F : 0.0F, 0.0F, 0.0F, 1.0F);
+		                GL11.glRotatef(90.0F, 0.0F, 0.0F, 1.0F);
+		                var8 = var251[0];
+		                var9 = var251[1];
+		                var10 = var251[2];
+		
+		                if (this.mc.gameSettings.anaglyph)
+		                {
+		                    var11 = (var8 * 30.0F + var9 * 59.0F + var10 * 11.0F) / 100.0F;
+		                    var12 = (var8 * 30.0F + var9 * 70.0F) / 100.0F;
+		                    var20 = (var8 * 30.0F + var10 * 70.0F) / 100.0F;
+		                    var8 = var11;
+		                    var9 = var12;
+		                    var10 = var20;
+		                }
+		
+		                var241.startDrawing(6);
+		                var241.setColorRGBA_F(var8, var9, var10, var251[3]);
+		                var241.addVertex(0.0D, 100.0D, 0.0D);
+		                byte var25 = 16;
+		                var241.setColorRGBA_F(var251[0], var251[1], var251[2], 0.0F);
+		
+		                for (var30 = 0; var30 <= var25; ++var30)
+		                {
+		                    var20 = (float)var30 * (float)Math.PI * 2.0F / (float)var25;
+		                    var16 = MathHelper.sin(var20);
+		                    var17 = MathHelper.cos(var20);
+		                    var241.addVertex((double)(var16 * 120.0F), (double)(var17 * 120.0F), (double)(-var17 * 40.0F * var251[3]));
+		                }
+		
+		                var241.draw();
+	                GL11.glPopMatrix();
+	                GL11.glShadeModel(GL11.GL_FLAT);
+	            }
+	
+	            GL11.glEnable(GL11.GL_TEXTURE_2D);
+	            if (shadersMod) {
+	                Reflector.callVoid(Reflector.ShadersMod_Shaders_enableTexture2D, new Object[] {});
+	            } 
+	               
+	            OpenGlHelper.glBlendFunc(770, 1, 1, 0);
+	            GL11.glPushMatrix();
+		            var8 = 1.0F - this.theWorld.getRainStrength(par1);
+		            GL11.glColor4f(1.0F, 1.0F, 1.0F, var8);
+		            GL11.glRotatef(-90.0F, 0.0F, 1.0F, 0.0F);
+		            
+		            if (shadersMod) {
+		                Reflector.callVoid(Reflector.ShadersMod_Shaders_preCelestialRotate, new Object[] {});
+		            }
+		                              
+		            CustomSky.renderSky(this.theWorld, this.renderEngine, this.theWorld.getCelestialAngle(par1), var8);
+		            
+		            GL11.glRotatef(this.theWorld.getCelestialAngle(par1) * 360.0F, 1.0F, 0.0F, 0.0F);
+		            
+		            if (shadersMod) {
+		                Reflector.callVoid(Reflector.ShadersMod_Shaders_postCelestialRotate, new Object[] {});
+		            }
+		
+		            if (Config.isSunMoonEnabled()) //moon or sun
+		            {
+		                var12 = 30.0F;
+		                this.renderEngine.bindTexture(locationSunPng);
+		                
+		                double box = 100;
+		                
+		                var241.startDrawingQuads();
+		                var241.addVertexWithUV((double)(-var12), box, (double)(-var12), 0.0D, 0.0D);
+		                var241.addVertexWithUV((double)var12, box, (double)(-var12), 1.0D, 0.0D);
+		                var241.addVertexWithUV((double)var12, box, (double)var12, 1.0D, 1.0D);
+		                var241.addVertexWithUV((double)(-var12), box, (double)var12, 0.0D, 1.0D);
+		                var241.draw();
+		                var12 = 20.0F;
+		                this.renderEngine.bindTexture(locationMoonPhasesPng);
+		                int var26 = this.theWorld.getMoonPhase();
+		                int var27 = var26 % 4;
+		                var30 = var26 / 4 % 2;
+		                var16 = (float)(var27 + 0) / 4.0F;
+		                var17 = (float)(var30 + 0) / 2.0F;
+		                float var18 = (float)(var27 + 1) / 4.0F;
+		                float var19 = (float)(var30 + 1) / 2.0F;
+		                var241.startDrawingQuads();
+		                var241.addVertexWithUV((double)(-var12), -box, (double)var12, (double)var18, (double)var19);
+		                var241.addVertexWithUV((double)var12, -box, (double)var12, (double)var16, (double)var19);
+		                var241.addVertexWithUV((double)var12, -box, (double)(-var12), (double)var16, (double)var17);
+		                var241.addVertexWithUV((double)(-var12), -box, (double)(-var12), (double)var18, (double)var17);
+		                var241.draw();
+		            }
+		
+		            GL11.glDisable(GL11.GL_TEXTURE_2D);
+		            if (shadersMod) {
+		                Reflector.callVoid(Reflector.ShadersMod_Shaders_disableTexture2D, new Object[] {});
+		            }
+		            var20 = this.theWorld.getStarBrightness(par1) * var8;
+		
+		            if (var20 > 0.0F && Config.isStarsEnabled() && !CustomSky.hasSkyLayers(this.theWorld))
+		            {
+		                GL11.glColor4f(var20, var20, var20, var20);
+		                GL11.glCallList(this.starGLCallList);
+		            }
+		
+		            GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
+		            GL11.glDisable(GL11.GL_BLEND);
+		            GL11.glEnable(GL11.GL_ALPHA_TEST);
+		            GL11.glEnable(GL11.GL_FOG);
+		            
+		            if (shadersMod) {
+		                Reflector.callVoid(Reflector.ShadersMod_Shaders_enableFog, new Object[] {});
+		            }
+		                 
+	            GL11.glPopMatrix();
+	            GL11.glDisable(GL11.GL_TEXTURE_2D);
+	            
+	            if (shadersMod) {
+	                Reflector.callVoid(Reflector.ShadersMod_Shaders_disableTexture2D, new Object[] {});
+	            }
+	            
+	            GL11.glColor3f(0.0F, 0.0F, 0.0F);
+	            //VIVECRAFT fix
+	           // double var28 = this.mc.thePlayer.getPosition(par1).yCoord - this.theWorld.getHorizon();
+	            double var28 = this.mc.thePlayer.getPosition(par1).yCoord - this.theWorld.getHorizon();
+	            if (var28 < 0.0D)
+	            {
+	                GL11.glPushMatrix();
+		                GL11.glTranslatef(0.0F, 120.0F, 0.0F);
+		                GL11.glCallList(this.glSkyList2);
+	                GL11.glPopMatrix();
+	                var10 = 1.0F;
+	                var11 = -((float)(var28 + 65.0D));
+	                var12 = -1.0F;
+	                var241.startDrawingQuads();
+	                var241.setColorRGBA_I(0, 255);
+	                var241.addVertex((double)(-var10), (double)var11, (double)var10);
+	                var241.addVertex((double)var10, (double)var11, (double)var10);
+	                var241.addVertex((double)var10, (double)var12, (double)var10);
+	                var241.addVertex((double)(-var10), (double)var12, (double)var10);
+	                var241.addVertex((double)(-var10), (double)var12, (double)(-var10));
+	                var241.addVertex((double)var10, (double)var12, (double)(-var10));
+	                var241.addVertex((double)var10, (double)var11, (double)(-var10));
+	                var241.addVertex((double)(-var10), (double)var11, (double)(-var10));
+	                var241.addVertex((double)var10, (double)var12, (double)(-var10));
+	                var241.addVertex((double)var10, (double)var12, (double)var10);
+	                var241.addVertex((double)var10, (double)var11, (double)var10);
+	                var241.addVertex((double)var10, (double)var11, (double)(-var10));
+	                var241.addVertex((double)(-var10), (double)var11, (double)(-var10));
+	                var241.addVertex((double)(-var10), (double)var11, (double)var10);
+	                var241.addVertex((double)(-var10), (double)var12, (double)var10);
+	                var241.addVertex((double)(-var10), (double)var12, (double)(-var10));
+	                var241.addVertex((double)(-var10), (double)var12, (double)(-var10));
+	                var241.addVertex((double)(-var10), (double)var12, (double)var10);
+	                var241.addVertex((double)var10, (double)var12, (double)var10);
+	                var241.addVertex((double)var10, (double)var12, (double)(-var10));
+	                var241.draw();
+	            }
+	
+	            if (this.theWorld.provider.isSkyColored())
+	            {
+	                GL11.glColor3f(var231 * 0.2F + 0.04F, var4 * 0.2F + 0.04F, var5 * 0.6F + 0.1F);
+	            }
+	            else
+	            {
+	                GL11.glColor3f(var231, var4, var5);
+	            }
+	
+	            if (this.mc.gameSettings.renderDistanceChunks <= 4)
+	            {
+	                GL11.glColor3f(this.mc.entityRenderer.fogColorRed, this.mc.entityRenderer.fogColorGreen, this.mc.entityRenderer.fogColorBlue);
+	            }
+	
+	            GL11.glPushMatrix();
+	            GL11.glTranslatef(0.0F, -((float)(var28 - 16.0D)), 0.0F);
+	
+	            if (Config.isSkyEnabled())
+	            {
+	                GL11.glCallList(this.glSkyList2);
+	            }
+	
+	            GL11.glPopMatrix();
+	            GL11.glEnable(GL11.GL_TEXTURE_2D);
+	            if (shadersMod) {
+	                Reflector.callVoid(Reflector.ShadersMod_Shaders_enableTexture2D, new Object[] {});
+	            }
+	            
+	        	//undo infinityrender
+	        GL11.glPopMatrix();
+	            
             GL11.glDepthMask(true);
+            /** END MINECRIFT SHADERS MOD **/
         }
     }
 
@@ -1781,6 +1977,7 @@
                     par1 = 0.0F;
                     GL11.glDisable(GL11.GL_CULL_FACE);
                     float var21 = (float)(this.mc.renderViewEntity.lastTickPosY + (this.mc.renderViewEntity.posY - this.mc.renderViewEntity.lastTickPosY) * (double)par1);
+                    var21 = (float) mc.renderViewEntity.boundingBox.minY;
                     byte var3 = 32;
                     int var4 = 256 / var3;
                     Tessellator var5 = Tessellator.instance;
@@ -1788,7 +1985,7 @@
                     GL11.glEnable(GL11.GL_BLEND);
                     OpenGlHelper.glBlendFunc(770, 771, 1, 0);
                     double dc;
-                    double exactPlayerZ1;
+
 
                     if (this.isFancyGlListClouds || this.cloudTickCounter >= this.cloudTickCounterGlList + 20)
                     {
@@ -1810,8 +2007,8 @@
                         }
 
                         var10 = 4.8828125E-4F;
-                        exactPlayerZ1 = (double)((float)this.cloudTickCounter + par1);
-                        dc = this.mc.renderViewEntity.prevPosX + (this.mc.renderViewEntity.posX - this.mc.renderViewEntity.prevPosX) * (double)par1 + exactPlayerZ1 * 0.029999999329447746D;
+                        double what = (double)((float)this.cloudTickCounter + par1);
+                        dc = this.mc.renderViewEntity.prevPosX + (this.mc.renderViewEntity.posX - this.mc.renderViewEntity.prevPosX) * (double)par1 + what * 0.029999999329447746D;
                         double cdx = this.mc.renderViewEntity.prevPosZ + (this.mc.renderViewEntity.posZ - this.mc.renderViewEntity.prevPosZ) * (double)par1;
                         int cdz = MathHelper.floor_double(dc / 2048.0D);
                         int var18 = MathHelper.floor_double(cdx / 2048.0D);
@@ -1839,16 +2036,17 @@
                         GL11.glEndList();
                         this.isFancyGlListClouds = false;
                         this.cloudTickCounterGlList = this.cloudTickCounter;
-                        this.cloudPlayerX = this.mc.renderViewEntity.prevPosX;
-                        this.cloudPlayerY = this.mc.renderViewEntity.prevPosY;
-                        this.cloudPlayerZ = this.mc.renderViewEntity.prevPosZ;
+                        this.cloudPlayerX = this.mc.entityRenderer.interpolatedPlayerPos.xCoord;
+                        this.cloudPlayerY = this.mc.renderViewEntity.boundingBox.minY;
+                        this.cloudPlayerZ = this.mc.entityRenderer.interpolatedPlayerPos.zCoord;
                     }
 
                     EntityLivingBase entityliving1 = this.mc.renderViewEntity;
                     double exactPlayerX1 = entityliving1.prevPosX + (entityliving1.posX - entityliving1.prevPosX) * (double)partialTicks1;
                     double exactPlayerY1 = entityliving1.prevPosY + (entityliving1.posY - entityliving1.prevPosY) * (double)partialTicks1;
-                    exactPlayerZ1 = entityliving1.prevPosZ + (entityliving1.posZ - entityliving1.prevPosZ) * (double)partialTicks1;
+                    double exactPlayerZ1 = entityliving1.prevPosZ + (entityliving1.posZ - entityliving1.prevPosZ) * (double)partialTicks1;
                     dc = (double)((float)(this.cloudTickCounter - this.cloudTickCounterGlList) + partialTicks1);
+                    //Shuld this be camera pos?
                     float cdx1 = (float)(exactPlayerX1 - this.cloudPlayerX + dc * 0.03D);
                     float cdy = (float)(exactPlayerY1 - this.cloudPlayerY);
                     float cdz1 = (float)(exactPlayerZ1 - this.cloudPlayerZ);
@@ -1879,7 +2077,9 @@
         float partialTicks = par1;
         par1 = 0.0F;
         GL11.glDisable(GL11.GL_CULL_FACE);
-        float var2 = (float)(this.mc.renderViewEntity.lastTickPosY + (this.mc.renderViewEntity.posY - this.mc.renderViewEntity.lastTickPosY) * (double)par1);
+        //VIVECRAFT
+        float var2 = (float) mc.renderViewEntity.boundingBox.minY;
+        //END VIVECRAFT
         Tessellator var3 = Tessellator.instance;
         float var4 = 12.0F;
         float var5 = 4.0F;
@@ -1900,29 +2100,29 @@
         if (!this.isFancyGlListClouds || this.cloudTickCounter >= this.cloudTickCounterGlList + 20)
         {
             GL11.glNewList(this.glListClouds, GL11.GL_COMPILE);
-            Vec3 entityliving = this.theWorld.getCloudColour(par1);
-            float exactPlayerX = (float)entityliving.xCoord;
-            float var17 = (float)entityliving.yCoord;
-            float exactPlayerY = (float)entityliving.zCoord;
-            float var19;
-            float exactPlayerZ;
-            float var21;
+            Vec3 cloudcolor = this.theWorld.getCloudColour(par1);
+            float red = (float)cloudcolor.xCoord;
+            float green = (float)cloudcolor.yCoord;
+            float blue = (float)cloudcolor.zCoord;
+            float r;
+            float g;
+            float b;
 
             if (this.mc.gameSettings.anaglyph)
             {
-                var19 = (exactPlayerX * 30.0F + var17 * 59.0F + exactPlayerY * 11.0F) / 100.0F;
-                exactPlayerZ = (exactPlayerX * 30.0F + var17 * 70.0F) / 100.0F;
-                var21 = (exactPlayerX * 30.0F + exactPlayerY * 70.0F) / 100.0F;
-                exactPlayerX = var19;
-                var17 = exactPlayerZ;
-                exactPlayerY = var21;
+                r = (red * 30.0F + green * 59.0F + blue * 11.0F) / 100.0F;
+                g = (red * 30.0F + green * 70.0F) / 100.0F;
+                b = (red * 30.0F + blue * 70.0F) / 100.0F;
+                red = r;
+                green = g;
+                blue = b;
             }
 
-            var19 = (float)(var8 * 0.0D);
-            exactPlayerZ = (float)(var10 * 0.0D);
-            var21 = 0.00390625F;
-            var19 = (float)MathHelper.floor_double(var8) * var21;
-            exactPlayerZ = (float)MathHelper.floor_double(var10) * var21;
+            r = (float)(var8 * 0.0D);
+            g = (float)(var10 * 0.0D);
+            b = 0.00390625F;
+            r = (float)MathHelper.floor_double(var8) * b;
+            g = (float)MathHelper.floor_double(var10) * b;
             float dc = (float)(var8 - (double)MathHelper.floor_double(var8));
             float var23 = (float)(var10 - (double)MathHelper.floor_double(var10));
             byte cdx = 8;
@@ -1964,25 +2164,25 @@
 
                         if (var12 > -var5 - 1.0F)
                         {
-                            var3.setColorRGBA_F(exactPlayerX * 0.7F, var17 * 0.7F, exactPlayerY * 0.7F, 0.8F);
+                            var3.setColorRGBA_F(red * 0.7F, green * 0.7F, blue * 0.7F, 0.8F);
                             var3.setNormal(0.0F, -1.0F, 0.0F);
-                            var3.addVertexWithUV((double)(var32 + 0.0F), (double)(var12 + 0.0F), (double)(var33 + (float)cdx), (double)((var30 + 0.0F) * var21 + var19), (double)((var31 + (float)cdx) * var21 + exactPlayerZ));
-                            var3.addVertexWithUV((double)(var32 + (float)cdx), (double)(var12 + 0.0F), (double)(var33 + (float)cdx), (double)((var30 + (float)cdx) * var21 + var19), (double)((var31 + (float)cdx) * var21 + exactPlayerZ));
-                            var3.addVertexWithUV((double)(var32 + (float)cdx), (double)(var12 + 0.0F), (double)(var33 + 0.0F), (double)((var30 + (float)cdx) * var21 + var19), (double)((var31 + 0.0F) * var21 + exactPlayerZ));
-                            var3.addVertexWithUV((double)(var32 + 0.0F), (double)(var12 + 0.0F), (double)(var33 + 0.0F), (double)((var30 + 0.0F) * var21 + var19), (double)((var31 + 0.0F) * var21 + exactPlayerZ));
+                            var3.addVertexWithUV((double)(var32 + 0.0F), (double)(var12 + 0.0F), (double)(var33 + (float)cdx), (double)((var30 + 0.0F) * b + r), (double)((var31 + (float)cdx) * b + g));
+                            var3.addVertexWithUV((double)(var32 + (float)cdx), (double)(var12 + 0.0F), (double)(var33 + (float)cdx), (double)((var30 + (float)cdx) * b + r), (double)((var31 + (float)cdx) * b + g));
+                            var3.addVertexWithUV((double)(var32 + (float)cdx), (double)(var12 + 0.0F), (double)(var33 + 0.0F), (double)((var30 + (float)cdx) * b + r), (double)((var31 + 0.0F) * b + g));
+                            var3.addVertexWithUV((double)(var32 + 0.0F), (double)(var12 + 0.0F), (double)(var33 + 0.0F), (double)((var30 + 0.0F) * b + r), (double)((var31 + 0.0F) * b + g));
                         }
 
                         if (var12 <= var5 + 1.0F)
                         {
-                            var3.setColorRGBA_F(exactPlayerX, var17, exactPlayerY, 0.8F);
+                            var3.setColorRGBA_F(red, green, blue, 0.8F);
                             var3.setNormal(0.0F, 1.0F, 0.0F);
-                            var3.addVertexWithUV((double)(var32 + 0.0F), (double)(var12 + var5 - cdz), (double)(var33 + (float)cdx), (double)((var30 + 0.0F) * var21 + var19), (double)((var31 + (float)cdx) * var21 + exactPlayerZ));
-                            var3.addVertexWithUV((double)(var32 + (float)cdx), (double)(var12 + var5 - cdz), (double)(var33 + (float)cdx), (double)((var30 + (float)cdx) * var21 + var19), (double)((var31 + (float)cdx) * var21 + exactPlayerZ));
-                            var3.addVertexWithUV((double)(var32 + (float)cdx), (double)(var12 + var5 - cdz), (double)(var33 + 0.0F), (double)((var30 + (float)cdx) * var21 + var19), (double)((var31 + 0.0F) * var21 + exactPlayerZ));
-                            var3.addVertexWithUV((double)(var32 + 0.0F), (double)(var12 + var5 - cdz), (double)(var33 + 0.0F), (double)((var30 + 0.0F) * var21 + var19), (double)((var31 + 0.0F) * var21 + exactPlayerZ));
+                            var3.addVertexWithUV((double)(var32 + 0.0F), (double)(var12 + var5 - cdz), (double)(var33 + (float)cdx), (double)((var30 + 0.0F) * b + r), (double)((var31 + (float)cdx) * b + g));
+                            var3.addVertexWithUV((double)(var32 + (float)cdx), (double)(var12 + var5 - cdz), (double)(var33 + (float)cdx), (double)((var30 + (float)cdx) * b + r), (double)((var31 + (float)cdx) * b + g));
+                            var3.addVertexWithUV((double)(var32 + (float)cdx), (double)(var12 + var5 - cdz), (double)(var33 + 0.0F), (double)((var30 + (float)cdx) * b + r), (double)((var31 + 0.0F) * b + g));
+                            var3.addVertexWithUV((double)(var32 + 0.0F), (double)(var12 + var5 - cdz), (double)(var33 + 0.0F), (double)((var30 + 0.0F) * b + r), (double)((var31 + 0.0F) * b + g));
                         }
 
-                        var3.setColorRGBA_F(exactPlayerX * 0.9F, var17 * 0.9F, exactPlayerY * 0.9F, 0.8F);
+                        var3.setColorRGBA_F(red * 0.9F, green * 0.9F, blue * 0.9F, 0.8F);
                         int var34;
 
                         if (var28 > -1)
@@ -1991,10 +2191,10 @@
 
                             for (var34 = 0; var34 < cdx; ++var34)
                             {
-                                var3.addVertexWithUV((double)(var32 + (float)var34 + 0.0F), (double)(var12 + 0.0F), (double)(var33 + (float)cdx), (double)((var30 + (float)var34 + 0.5F) * var21 + var19), (double)((var31 + (float)cdx) * var21 + exactPlayerZ));
-                                var3.addVertexWithUV((double)(var32 + (float)var34 + 0.0F), (double)(var12 + var5), (double)(var33 + (float)cdx), (double)((var30 + (float)var34 + 0.5F) * var21 + var19), (double)((var31 + (float)cdx) * var21 + exactPlayerZ));
-                                var3.addVertexWithUV((double)(var32 + (float)var34 + 0.0F), (double)(var12 + var5), (double)(var33 + 0.0F), (double)((var30 + (float)var34 + 0.5F) * var21 + var19), (double)((var31 + 0.0F) * var21 + exactPlayerZ));
-                                var3.addVertexWithUV((double)(var32 + (float)var34 + 0.0F), (double)(var12 + 0.0F), (double)(var33 + 0.0F), (double)((var30 + (float)var34 + 0.5F) * var21 + var19), (double)((var31 + 0.0F) * var21 + exactPlayerZ));
+                                var3.addVertexWithUV((double)(var32 + (float)var34 + 0.0F), (double)(var12 + 0.0F), (double)(var33 + (float)cdx), (double)((var30 + (float)var34 + 0.5F) * b + r), (double)((var31 + (float)cdx) * b + g));
+                                var3.addVertexWithUV((double)(var32 + (float)var34 + 0.0F), (double)(var12 + var5), (double)(var33 + (float)cdx), (double)((var30 + (float)var34 + 0.5F) * b + r), (double)((var31 + (float)cdx) * b + g));
+                                var3.addVertexWithUV((double)(var32 + (float)var34 + 0.0F), (double)(var12 + var5), (double)(var33 + 0.0F), (double)((var30 + (float)var34 + 0.5F) * b + r), (double)((var31 + 0.0F) * b + g));
+                                var3.addVertexWithUV((double)(var32 + (float)var34 + 0.0F), (double)(var12 + 0.0F), (double)(var33 + 0.0F), (double)((var30 + (float)var34 + 0.5F) * b + r), (double)((var31 + 0.0F) * b + g));
                             }
                         }
 
@@ -2004,14 +2204,14 @@
 
                             for (var34 = 0; var34 < cdx; ++var34)
                             {
-                                var3.addVertexWithUV((double)(var32 + (float)var34 + 1.0F - cdz), (double)(var12 + 0.0F), (double)(var33 + (float)cdx), (double)((var30 + (float)var34 + 0.5F) * var21 + var19), (double)((var31 + (float)cdx) * var21 + exactPlayerZ));
-                                var3.addVertexWithUV((double)(var32 + (float)var34 + 1.0F - cdz), (double)(var12 + var5), (double)(var33 + (float)cdx), (double)((var30 + (float)var34 + 0.5F) * var21 + var19), (double)((var31 + (float)cdx) * var21 + exactPlayerZ));
-                                var3.addVertexWithUV((double)(var32 + (float)var34 + 1.0F - cdz), (double)(var12 + var5), (double)(var33 + 0.0F), (double)((var30 + (float)var34 + 0.5F) * var21 + var19), (double)((var31 + 0.0F) * var21 + exactPlayerZ));
-                                var3.addVertexWithUV((double)(var32 + (float)var34 + 1.0F - cdz), (double)(var12 + 0.0F), (double)(var33 + 0.0F), (double)((var30 + (float)var34 + 0.5F) * var21 + var19), (double)((var31 + 0.0F) * var21 + exactPlayerZ));
+                                var3.addVertexWithUV((double)(var32 + (float)var34 + 1.0F - cdz), (double)(var12 + 0.0F), (double)(var33 + (float)cdx), (double)((var30 + (float)var34 + 0.5F) * b + r), (double)((var31 + (float)cdx) * b + g));
+                                var3.addVertexWithUV((double)(var32 + (float)var34 + 1.0F - cdz), (double)(var12 + var5), (double)(var33 + (float)cdx), (double)((var30 + (float)var34 + 0.5F) * b + r), (double)((var31 + (float)cdx) * b + g));
+                                var3.addVertexWithUV((double)(var32 + (float)var34 + 1.0F - cdz), (double)(var12 + var5), (double)(var33 + 0.0F), (double)((var30 + (float)var34 + 0.5F) * b + r), (double)((var31 + 0.0F) * b + g));
+                                var3.addVertexWithUV((double)(var32 + (float)var34 + 1.0F - cdz), (double)(var12 + 0.0F), (double)(var33 + 0.0F), (double)((var30 + (float)var34 + 0.5F) * b + r), (double)((var31 + 0.0F) * b + g));
                             }
                         }
 
-                        var3.setColorRGBA_F(exactPlayerX * 0.8F, var17 * 0.8F, exactPlayerY * 0.8F, 0.8F);
+                        var3.setColorRGBA_F(red * 0.8F, green * 0.8F, blue * 0.8F, 0.8F);
 
                         if (var29 > -1)
                         {
@@ -2019,10 +2219,10 @@
 
                             for (var34 = 0; var34 < cdx; ++var34)
                             {
-                                var3.addVertexWithUV((double)(var32 + 0.0F), (double)(var12 + var5), (double)(var33 + (float)var34 + 0.0F), (double)((var30 + 0.0F) * var21 + var19), (double)((var31 + (float)var34 + 0.5F) * var21 + exactPlayerZ));
-                                var3.addVertexWithUV((double)(var32 + (float)cdx), (double)(var12 + var5), (double)(var33 + (float)var34 + 0.0F), (double)((var30 + (float)cdx) * var21 + var19), (double)((var31 + (float)var34 + 0.5F) * var21 + exactPlayerZ));
-                                var3.addVertexWithUV((double)(var32 + (float)cdx), (double)(var12 + 0.0F), (double)(var33 + (float)var34 + 0.0F), (double)((var30 + (float)cdx) * var21 + var19), (double)((var31 + (float)var34 + 0.5F) * var21 + exactPlayerZ));
-                                var3.addVertexWithUV((double)(var32 + 0.0F), (double)(var12 + 0.0F), (double)(var33 + (float)var34 + 0.0F), (double)((var30 + 0.0F) * var21 + var19), (double)((var31 + (float)var34 + 0.5F) * var21 + exactPlayerZ));
+                                var3.addVertexWithUV((double)(var32 + 0.0F), (double)(var12 + var5), (double)(var33 + (float)var34 + 0.0F), (double)((var30 + 0.0F) * b + r), (double)((var31 + (float)var34 + 0.5F) * b + g));
+                                var3.addVertexWithUV((double)(var32 + (float)cdx), (double)(var12 + var5), (double)(var33 + (float)var34 + 0.0F), (double)((var30 + (float)cdx) * b + r), (double)((var31 + (float)var34 + 0.5F) * b + g));
+                                var3.addVertexWithUV((double)(var32 + (float)cdx), (double)(var12 + 0.0F), (double)(var33 + (float)var34 + 0.0F), (double)((var30 + (float)cdx) * b + r), (double)((var31 + (float)var34 + 0.5F) * b + g));
+                                var3.addVertexWithUV((double)(var32 + 0.0F), (double)(var12 + 0.0F), (double)(var33 + (float)var34 + 0.0F), (double)((var30 + 0.0F) * b + r), (double)((var31 + (float)var34 + 0.5F) * b + g));
                             }
                         }
 
@@ -2032,10 +2232,10 @@
 
                             for (var34 = 0; var34 < cdx; ++var34)
                             {
-                                var3.addVertexWithUV((double)(var32 + 0.0F), (double)(var12 + var5), (double)(var33 + (float)var34 + 1.0F - cdz), (double)((var30 + 0.0F) * var21 + var19), (double)((var31 + (float)var34 + 0.5F) * var21 + exactPlayerZ));
-                                var3.addVertexWithUV((double)(var32 + (float)cdx), (double)(var12 + var5), (double)(var33 + (float)var34 + 1.0F - cdz), (double)((var30 + (float)cdx) * var21 + var19), (double)((var31 + (float)var34 + 0.5F) * var21 + exactPlayerZ));
-                                var3.addVertexWithUV((double)(var32 + (float)cdx), (double)(var12 + 0.0F), (double)(var33 + (float)var34 + 1.0F - cdz), (double)((var30 + (float)cdx) * var21 + var19), (double)((var31 + (float)var34 + 0.5F) * var21 + exactPlayerZ));
-                                var3.addVertexWithUV((double)(var32 + 0.0F), (double)(var12 + 0.0F), (double)(var33 + (float)var34 + 1.0F - cdz), (double)((var30 + 0.0F) * var21 + var19), (double)((var31 + (float)var34 + 0.5F) * var21 + exactPlayerZ));
+                                var3.addVertexWithUV((double)(var32 + 0.0F), (double)(var12 + var5), (double)(var33 + (float)var34 + 1.0F - cdz), (double)((var30 + 0.0F) * b + r), (double)((var31 + (float)var34 + 0.5F) * b + g));
+                                var3.addVertexWithUV((double)(var32 + (float)cdx), (double)(var12 + var5), (double)(var33 + (float)var34 + 1.0F - cdz), (double)((var30 + (float)cdx) * b + r), (double)((var31 + (float)var34 + 0.5F) * b + g));
+                                var3.addVertexWithUV((double)(var32 + (float)cdx), (double)(var12 + 0.0F), (double)(var33 + (float)var34 + 1.0F - cdz), (double)((var30 + (float)cdx) * b + r), (double)((var31 + (float)var34 + 0.5F) * b + g));
+                                var3.addVertexWithUV((double)(var32 + 0.0F), (double)(var12 + 0.0F), (double)(var33 + (float)var34 + 1.0F - cdz), (double)((var30 + 0.0F) * b + r), (double)((var31 + (float)var34 + 0.5F) * b + g));
                             }
                         }
 
@@ -2047,15 +2247,18 @@
             GL11.glEndList();
             this.isFancyGlListClouds = true;
             this.cloudTickCounterGlList = this.cloudTickCounter;
-            this.cloudPlayerX = this.mc.renderViewEntity.prevPosX;
-            this.cloudPlayerY = this.mc.renderViewEntity.prevPosY;
-            this.cloudPlayerZ = this.mc.renderViewEntity.prevPosZ;
+            
+            //VIVECRAFT just trust me.
+            this.cloudPlayerX = this.mc.entityRenderer.interpolatedPlayerPos.xCoord;
+            this.cloudPlayerY = this.mc.renderViewEntity.boundingBox.minY;
+            this.cloudPlayerZ = this.mc.entityRenderer.interpolatedPlayerPos.zCoord;
+            //END VIVECRAFT
         }
 
-        EntityLivingBase var36 = this.mc.renderViewEntity;
-        double var37 = var36.prevPosX + (var36.posX - var36.prevPosX) * (double)partialTicks;
-        double var38 = var36.prevPosY + (var36.posY - var36.prevPosY) * (double)partialTicks;
-        double var39 = var36.prevPosZ + (var36.posZ - var36.prevPosZ) * (double)partialTicks;
+        EntityLivingBase rve = this.mc.renderViewEntity;
+        double var37 = rve.prevPosX + (rve.posX - rve.prevPosX) * (double)partialTicks;
+        double var38 = rve.prevPosY + (rve.posY - rve.prevPosY) * (double)partialTicks;
+        double var39 = rve.prevPosZ + (rve.posZ - rve.prevPosZ) * (double)partialTicks;
         double var40 = (double)((float)(this.cloudTickCounter - this.cloudTickCounterGlList) + partialTicks);
         float var41 = (float)(var37 - this.cloudPlayerX + var40 * 0.03D);
         float var42 = (float)(var38 - this.cloudPlayerY);
@@ -2075,7 +2278,9 @@
     {
         this.renderViewEntity = entityliving;
 
-        if (WrUpdates.hasWrUpdater())
+        //VIVECRAFT override multicore?
+        if (false)
+        //END VIVECRAFT
         {
             return WrUpdates.updateRenderers(this, entityliving, flag);
         }
@@ -2093,7 +2298,7 @@
                 maxNum *= 3;
             }
 
-            byte NOT_IN_FRUSTRUM_MUL = 4;
+            byte NOT_IN_FRUSTRUM_MUL = 127;
             int numValid = 0;
             WorldRenderer wrBest = null;
             float distSqBest = Float.MAX_VALUE;
@@ -2129,6 +2334,7 @@
                                 break;
                             }
 
+                            i.updateInFrustum(this.mc.entityRenderer.currentFrustum);
                             if (!i.isInFrustum)
                             {
                                 wr *= (float)NOT_IN_FRUSTRUM_MUL;
@@ -2167,6 +2373,7 @@
                     {
                         float distSq = var17.distanceToEntitySquared(entityliving);
 
+                        var17.updateInFrustum(this.mc.entityRenderer.currentFrustum);
                         if (!var17.isInFrustum)
                         {
                             distSq *= (float)NOT_IN_FRUSTRUM_MUL;
@@ -2202,6 +2409,8 @@
 
     public void drawBlockDamageTexture(Tessellator par1Tessellator, EntityLivingBase par2EntityPlayer, float par3)
     {
+        /** MINECRIFT SHADERS MOD **/
+        boolean shadersMod = Reflector.shadersModExists();
         double var4 = par2EntityPlayer.lastTickPosX + (par2EntityPlayer.posX - par2EntityPlayer.lastTickPosX) * (double)par3;
         double var6 = par2EntityPlayer.lastTickPosY + (par2EntityPlayer.posY - par2EntityPlayer.lastTickPosY) * (double)par3;
         double var8 = par2EntityPlayer.lastTickPosZ + (par2EntityPlayer.posZ - par2EntityPlayer.lastTickPosZ) * (double)par3;
@@ -2216,6 +2425,10 @@
             GL11.glEnable(GL11.GL_POLYGON_OFFSET_FILL);
             GL11.glAlphaFunc(GL11.GL_GREATER, 0.1F);
             GL11.glEnable(GL11.GL_ALPHA_TEST);
+            if (shadersMod) {
+                //Shaders.beginBlockDestroyProgress();
+                Reflector.callVoid(Reflector.ShadersMod_Shaders_beginBlockDestroyProgress, new Object[]{});
+            }
             par1Tessellator.startDrawingQuads();
             par1Tessellator.setTranslation(-var4, -var6, -var8);
             par1Tessellator.disableColor();
@@ -2245,6 +2458,10 @@
 
             par1Tessellator.draw();
             par1Tessellator.setTranslation(0.0D, 0.0D, 0.0D);
+            if (shadersMod) {
+                //Shaders.endBlockDestroyProgress();
+                Reflector.callVoid(Reflector.ShadersMod_Shaders_endBlockDestroyProgress, new Object[]{});
+            }
             GL11.glDisable(GL11.GL_ALPHA_TEST);
             GL11.glPolygonOffset(0.0F, 0.0F);
             GL11.glDisable(GL11.GL_POLYGON_OFFSET_FILL);
@@ -2252,6 +2469,7 @@
             GL11.glDepthMask(true);
             GL11.glPopMatrix();
         }
+        /** END MINECRIFT SHADERS MOD **/
     }
 
     /**
@@ -2259,6 +2477,8 @@
      */
     public void drawSelectionBox(EntityPlayer par1EntityPlayer, MovingObjectPosition par2MovingObjectPosition, int par3, float par4)
     {
+        /** MINECRIFT SHADERS MOD **/
+        boolean shadersMod = Reflector.shadersModExists();
         if (par3 == 0 && par2MovingObjectPosition.typeOfHit == MovingObjectPosition.MovingObjectType.BLOCK)
         {
             GL11.glEnable(GL11.GL_BLEND);
@@ -2266,6 +2486,10 @@
             GL11.glColor4f(0.0F, 0.0F, 0.0F, 0.4F);
             GL11.glLineWidth(2.0F);
             GL11.glDisable(GL11.GL_TEXTURE_2D);
+            if (shadersMod) {
+                //Shaders.disableTexture2D();
+                Reflector.callVoid(Reflector.ShadersMod_Shaders_disableTexture2D, new Object[]{});
+            }
             GL11.glDepthMask(false);
             float var5 = 0.002F;
             Block var6 = this.theWorld.getBlock(par2MovingObjectPosition.blockX, par2MovingObjectPosition.blockY, par2MovingObjectPosition.blockZ);
@@ -2281,8 +2505,13 @@
 
             GL11.glDepthMask(true);
             GL11.glEnable(GL11.GL_TEXTURE_2D);
+            if (shadersMod) {
+                //Shaders.enableTexture2D();
+                Reflector.callVoid(Reflector.ShadersMod_Shaders_enableTexture2D, new Object[]{});
+            }
             GL11.glDisable(GL11.GL_BLEND);
         }
+        /** END MINECRIFT SHADERS MOD **/
     }
 
     /**
@@ -2932,7 +3161,7 @@
                 {
                     this.theWorld.playSound((double)par3 + 0.5D, (double)par4 + 0.5D, (double)par5 + 0.5D, "random.door_close", 1.0F, this.theWorld.rand.nextFloat() * 0.1F + 0.9F, false);
                 }
-
+                
                 break;
 
             case 1004:
@@ -3026,12 +3255,13 @@
 
             case 2001:
                 var8 = Block.getBlockById(par6 & 4095);
-
+//					break blcok
                 if (var8.getMaterial() != Material.air)
                 {
                     this.mc.getSoundHandler().playSound(new PositionedSoundRecord(new ResourceLocation(var8.stepSound.getDigResourcePath()), (var8.stepSound.getVolume() + 1.0F) / 2.0F, var8.stepSound.getFrequency() * 0.8F, (float)par3 + 0.5F, (float)par4 + 0.5F, (float)par5 + 0.5F));
+                	this.mc.vrPlayer.triggerHapticPulse(0,250);    
                 }
-
+      
                 this.mc.effectRenderer.addBlockDestroyEffects(par3, par4, par5, var8, par6 >> 12 & 255);
                 break;
 
@@ -3128,6 +3358,9 @@
 
                     for (int var24 = 0; var24 < var23; ++var24)
                     {
+                  //landing
+                    	this.mc.vrPlayer.triggerHapticPulse(0,2500);    
+                        this.mc.vrPlayer.triggerHapticPulse(1,2500);                  
                         float var25 = MathHelper.randomFloatClamp(var7, 0.0F, ((float)Math.PI * 2F));
                         var26 = (double)MathHelper.randomFloatClamp(var7, 0.75F, 1.0F);
                         var28 = 0.20000000298023224D + var21 / 100.0D;
