--- a/net/minecraft/client/shader/Framebuffer.java
+++ b/net/minecraft/client/shader/Framebuffer.java
@@ -1,10 +1,21 @@
 package net.minecraft.client.shader;
 
 import java.nio.ByteBuffer;
+
 import net.minecraft.client.renderer.OpenGlHelper;
 import net.minecraft.client.renderer.Tessellator;
 import net.minecraft.client.renderer.texture.TextureUtil;
+import net.minecraft.src.Reflector;
+
+import org.lwjgl.opengl.ARBFramebufferObject;
+import org.lwjgl.opengl.ContextCapabilities;
+import org.lwjgl.opengl.EXTFramebufferObject;
 import org.lwjgl.opengl.GL11;
+import org.lwjgl.opengl.GL30;
+import org.lwjgl.opengl.GL32;
+import org.lwjgl.opengl.GLContext;
+
+import com.mtbs3d.minecrift.utils.TextureSelector;
 
 public class Framebuffer
 {
@@ -14,32 +25,74 @@
     public int framebufferHeight;
     public boolean useDepth;
     public int framebufferObject;
-    public int framebufferTexture;
+    public int[] framebufferTextures = new int[8];
+    public int framebufferTexture = -1; //only here for compatibility
     public int depthBuffer;
     public float[] framebufferColor;
     public int framebufferFilter;
     private static final String __OBFID = "CL_00000959";
 
-    public Framebuffer(int p_i45078_1_, int p_i45078_2_, boolean p_i45078_3_)
+    /** MINECRIFT */
+    public String _name;
+    public boolean genMipMaps = false;
+    public boolean multiSample = false;
+    public int multiSampleCount = 0;
+    public int textureType = GL11.GL_TEXTURE_2D;
+    public static final int NO_TEXTURE_ID = -1;
+    public boolean generatedFramebufferTexture = true;
+
+	/** END MINECRIFT */
+
+    public Framebuffer(int width, int height, boolean useDepth)
+    {
+	/** MINECRIFT */
+        this("Unknown", width, height, useDepth, false, false, 0,-1);
+    }
+
+    public Framebuffer(String name, int width, int height, boolean useDepth, boolean generateMipMaps)
     {
-        this.useDepth = p_i45078_3_;
+        this(name, width, height, useDepth, generateMipMaps, false, 0,-1);
+    }
+
+    public Framebuffer(String name, int width, int height, boolean useDepth, boolean generateMipMaps, boolean multisample, int multisamplecount, int textureID)
+    {
+        this._name = name;
+        this.useDepth = useDepth;
         this.framebufferObject = -1;
-        this.framebufferTexture = -1;
+        
+        for (int i = 0 ; i <8; i++){
+            this.framebufferTextures[i] = NO_TEXTURE_ID;
+		}
+        this.framebufferTexture = framebufferTextures[0];
+        this.generatedFramebufferTexture = true;
         this.depthBuffer = -1;
         this.framebufferColor = new float[4];
         this.framebufferColor[0] = 1.0F;
         this.framebufferColor[1] = 1.0F;
         this.framebufferColor[2] = 1.0F;
         this.framebufferColor[3] = 0.0F;
-        this.createBindFramebuffer(p_i45078_1_, p_i45078_2_);
+        this.genMipMaps = generateMipMaps;
+        this.multiSample = multisample;
+        if (this.multiSample) {
+            this.multiSampleCount = multisamplecount;
+            this.textureType = GL32.GL_TEXTURE_2D_MULTISAMPLE;
+        }
+
+        this.createBindFramebuffer(width, height, textureID);
+    }
+
+    public void createBindFramebuffer(int width, int height)
+    {
+        createBindFramebuffer(width, height, NO_TEXTURE_ID);
     }
 
-    public void createBindFramebuffer(int p_147613_1_, int p_147613_2_)
+    public void createBindFramebuffer(int width, int height, int textureId)
     {
+/** END MINECRIFT */
         if (!OpenGlHelper.isFramebufferEnabled())
         {
-            this.framebufferWidth = p_147613_1_;
-            this.framebufferHeight = p_147613_2_;
+            this.framebufferWidth = width;
+            this.framebufferHeight = height;
         }
         else
         {
@@ -50,9 +103,11 @@
                 this.deleteFramebuffer();
             }
 
-            this.createFramebuffer(p_147613_1_, p_147613_2_);
-            this.checkFramebufferComplete();
-            OpenGlHelper.func_153171_g(OpenGlHelper.field_153198_e, 0);
+            this.createFramebuffer(width, height, textureId);
+			/** MINECRIFT *
+			this.checkFramebufferComplete();
+			** END MINECRIFT */
+            OpenGlHelper.glBinDframeBuffer(OpenGlHelper.glFrameBuffer, 0);
         }
     }
 
@@ -65,31 +120,40 @@
 
             if (this.depthBuffer > -1)
             {
-                OpenGlHelper.func_153184_g(this.depthBuffer);
+                OpenGlHelper.glDeleteRenderBuffer(this.depthBuffer);
                 this.depthBuffer = -1;
             }
-
-            if (this.framebufferTexture > -1)
-            {
-                TextureUtil.deleteTexture(this.framebufferTexture);
-                this.framebufferTexture = -1;
+            /* MINECRIFT */
+            if (this.framebufferTextures[0] > NO_TEXTURE_ID && this.generatedFramebufferTexture == true)
+            /* END MINECRIFT */
+            {
+                TextureUtil.deleteTexture(this.framebufferTextures[0]);
+                this.framebufferTextures[0] = -1;
+                this.framebufferTexture = framebufferTextures[0];
             }
 
             if (this.framebufferObject > -1)
             {
-                OpenGlHelper.func_153171_g(OpenGlHelper.field_153198_e, 0);
-                OpenGlHelper.func_153174_h(this.framebufferObject);
+                OpenGlHelper.glBinDframeBuffer(OpenGlHelper.glFrameBuffer, 0);
+                OpenGlHelper.glDeleteFramebuffers(this.framebufferObject);
                 this.framebufferObject = -1;
             }
         }
     }
 
-    public void createFramebuffer(int p_147605_1_, int p_147605_2_)
+    public void createFramebuffer(int width, int height)
+    {
+/** MINECRIFT */
+        createFramebuffer(width, height, NO_TEXTURE_ID);
+    }
+
+    public void createFramebuffer(int width, int height, int textureId)
     {
-        this.framebufferWidth = p_147605_1_;
-        this.framebufferHeight = p_147605_2_;
-        this.framebufferTextureWidth = p_147605_1_;
-        this.framebufferTextureHeight = p_147605_2_;
+/** END MINECRIFT */
+        this.framebufferWidth = width;
+        this.framebufferHeight = height;
+        this.framebufferTextureWidth = width;
+        this.framebufferTextureHeight = height;
 
         if (!OpenGlHelper.isFramebufferEnabled())
         {
@@ -97,68 +161,119 @@
         }
         else
         {
-            this.framebufferObject = OpenGlHelper.func_153165_e();
-            this.framebufferTexture = TextureUtil.glGenTextures();
+			/** MINECRIFT */
+            this.framebufferObject = OpenGlHelper.glGenFramebuffer();      // GL30.glGenFramebuffers()
+            if (textureId == NO_TEXTURE_ID) {
+                // generate texture
+                this.framebufferTextures[0] = TextureUtil.glGenTextures();
+                this.framebufferTexture = framebufferTextures[0];
+                this.generatedFramebufferTexture = true;
+            }
+            else {
+                // Use supplied texture ID
+                this.framebufferTextures[0] = textureId;
+                this.framebufferTexture = framebufferTextures[0];
+                this.generatedFramebufferTexture = false;
+            }
 
             if (this.useDepth)
             {
-                this.depthBuffer = OpenGlHelper.func_153185_f();
+                this.depthBuffer = TextureUtil.glGenTextures();     // GL30.glGenRenderbuffers()
             }
 
-            this.setFramebufferFilter(9728);
-            GL11.glBindTexture(GL11.GL_TEXTURE_2D, this.framebufferTexture);
-            GL11.glTexImage2D(GL11.GL_TEXTURE_2D, 0, GL11.GL_RGBA8, this.framebufferTextureWidth, this.framebufferTextureHeight, 0, GL11.GL_RGBA, GL11.GL_UNSIGNED_BYTE, (ByteBuffer)null);
-            OpenGlHelper.func_153171_g(OpenGlHelper.field_153198_e, this.framebufferObject);
-            OpenGlHelper.func_153188_a(OpenGlHelper.field_153198_e, OpenGlHelper.field_153200_g, 3553, this.framebufferTexture, 0);
+            this.setFramebufferFilter(9728);        // GL11.GL_NEAREST
+            GL11.glBindTexture(this.textureType, this.framebufferTextures[0]);
+            if (textureId == NO_TEXTURE_ID)
+            {
+                if (!this.multiSample) {
+                    GL11.glTexImage2D(this.textureType, 0, GL11.GL_RGBA8, this.framebufferTextureWidth, this.framebufferTextureHeight, 0, GL11.GL_RGBA, GL11.GL_UNSIGNED_BYTE, (ByteBuffer) null);
+                }
+                else {
+                    // TODO: Check GLContext capabilities
+                    GL32.glTexImage2DMultisample(this.textureType, this.multiSampleCount, GL11.GL_RGBA8, this.framebufferTextureWidth, this.framebufferTextureHeight, false);
+                }
+            }
+
+            if (this.genMipMaps) {
+                // Allocate mip map storage
+                genMipMaps();                // TODO: Check GLContext capabilities
+            }
+
+            OpenGlHelper.glBinDframeBuffer(OpenGlHelper.glFrameBuffer, this.framebufferObject);   // GL30.glBindFramebuffer
+            OpenGlHelper.glFrameBufferTexture2D(OpenGlHelper.glFrameBuffer, OpenGlHelper.glColorAttachment0, this.textureType, this.framebufferTextures[0], 0);    // GL30.glFramebufferTexture2D
 
             if (this.useDepth)
             {
-                OpenGlHelper.func_153176_h(OpenGlHelper.field_153199_f, this.depthBuffer);
-                OpenGlHelper.func_153186_a(OpenGlHelper.field_153199_f, 33190, this.framebufferTextureWidth, this.framebufferTextureHeight);
-                OpenGlHelper.func_153190_b(OpenGlHelper.field_153198_e, OpenGlHelper.field_153201_h, OpenGlHelper.field_153199_f, this.depthBuffer);
+            	GL11.glBindTexture((int)3553, this.depthBuffer );
+				GL11.glTexParameteri((int)3553, (int)10242, (int)10496);
+				GL11.glTexParameteri((int)3553, (int)10243, (int)10496);
+				GL11.glTexParameteri((int)3553, (int)10241, (int)9728);
+				GL11.glTexParameteri((int)3553, (int)10240, (int)9728);
+				GL11.glTexParameteri((int)3553, (int)34891, (int)6409);
+        		GL11.glTexImage2D(GL11.GL_TEXTURE_2D, (int)0, GL30.GL_DEPTH24_STENCIL8, framebufferWidth, framebufferHeight, (int)0, GL30.GL_DEPTH_STENCIL,  GL30.GL_UNSIGNED_INT_24_8, (ByteBuffer)null);
+				GL30.glFramebufferTexture2D(GL30.GL_FRAMEBUFFER, GL30.GL_DEPTH_STENCIL_ATTACHMENT, GL11.GL_TEXTURE_2D, depthBuffer, (int)0);
             }
 
+            checkFramebufferComplete();
             this.framebufferClear();
             this.unbindFramebufferTexture();
+			/** END MINECRIFT */
         }
     }
 
-    public void setFramebufferFilter(int p_147607_1_)
+	/** MINECRIFT */
+    public void genMipMaps()
+    {
+        GL30.glGenerateMipmap(this.textureType);    // TODO: Minecrift - Check GLContext capabilities
+    }
+	/** END MINECRIFT */
+
+    public void setFramebufferFilter(int filter)
     {
         if (OpenGlHelper.isFramebufferEnabled())
         {
-            this.framebufferFilter = p_147607_1_;
-            GL11.glBindTexture(GL11.GL_TEXTURE_2D, this.framebufferTexture);
-            GL11.glTexParameterf(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_MIN_FILTER, (float)p_147607_1_);
-            GL11.glTexParameterf(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_MAG_FILTER, (float)p_147607_1_);
-            GL11.glTexParameterf(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_WRAP_S, 10496.0F);
-            GL11.glTexParameterf(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_WRAP_T, 10496.0F);
-            GL11.glBindTexture(GL11.GL_TEXTURE_2D, 0);
+			/** MINECRIFT */
+            this.framebufferFilter = filter;
+            GL11.glBindTexture(this.textureType, this.framebufferTextures[0]);
+            if (!this.multiSample) {
+                GL11.glTexParameterf(this.textureType, GL11.GL_TEXTURE_MIN_FILTER, (float) filter);
+                GL11.glTexParameterf(this.textureType, GL11.GL_TEXTURE_MAG_FILTER, (float) filter);
+                GL11.glTexParameterf(this.textureType, GL11.GL_TEXTURE_WRAP_S, 10496.0F);
+                GL11.glTexParameterf(this.textureType, GL11.GL_TEXTURE_WRAP_T, 10496.0F);
+            }
+            GL11.glBindTexture(this.textureType, 0);
+			/** END MINECRIFT */
         }
     }
 
     public void checkFramebufferComplete()
     {
-        int var1 = OpenGlHelper.func_153167_i(OpenGlHelper.field_153198_e);
+        int var1 = OpenGlHelper.glCheckFrameBufferStatus(OpenGlHelper.glFrameBuffer);
 
-        if (var1 != OpenGlHelper.field_153202_i)
+        if (var1 != OpenGlHelper.glFramebuffercomplete)
         {
-            if (var1 == OpenGlHelper.field_153203_j)
+            if (var1 == OpenGlHelper.glIncompleteAttachment)
             {
                 throw new RuntimeException("GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT");
             }
-            else if (var1 == OpenGlHelper.field_153204_k)
+            else if (var1 == OpenGlHelper.glMissingAttachment)
             {
                 throw new RuntimeException("GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT");
             }
-            else if (var1 == OpenGlHelper.field_153205_l)
+            else if (var1 == OpenGlHelper.glIncompleteDrawBuffer)
             {
                 throw new RuntimeException("GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER");
             }
-            else if (var1 == OpenGlHelper.field_153206_m)
+            else if (var1 == OpenGlHelper.incompleteReadBuffer)
             {
                 throw new RuntimeException("GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER");
             }
+			/** MINECRIFT */
+            else if (var1 == GL30.GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE) // TODO: Minecrift - need to handle older OpenGL versions etc
+            {
+                throw new RuntimeException("GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE");
+            }
+			/** END MINECRIFT */
             else
             {
                 throw new RuntimeException("glCheckFramebufferStatus returned unknown status:" + var1);
@@ -168,27 +283,31 @@
 
     public void bindFramebufferTexture()
     {
+        /** MINECRIFT */
         if (OpenGlHelper.isFramebufferEnabled())
         {
-            GL11.glBindTexture(GL11.GL_TEXTURE_2D, this.framebufferTexture);
+            GL11.glBindTexture(this.textureType, this.framebufferTextures[0]);
         }
+		/** END MINECRIFT */
     }
 
     public void unbindFramebufferTexture()
     {
+		/** MINECRIFT */
         if (OpenGlHelper.isFramebufferEnabled())
         {
-            GL11.glBindTexture(GL11.GL_TEXTURE_2D, 0);
+            GL11.glBindTexture(this.textureType, 0);
         }
+		/** END MINECRIFT */
     }
 
-    public void bindFramebuffer(boolean p_147610_1_)
+    public void bindFramebuffer(boolean setViewport)
     {
         if (OpenGlHelper.isFramebufferEnabled())
         {
-            OpenGlHelper.func_153171_g(OpenGlHelper.field_153198_e, this.framebufferObject);
+            OpenGlHelper.glBinDframeBuffer(OpenGlHelper.glFrameBuffer, this.framebufferObject);
 
-            if (p_147610_1_)
+            if (setViewport)
             {
                 GL11.glViewport(0, 0, this.framebufferWidth, this.framebufferHeight);
             }
@@ -199,7 +318,7 @@
     {
         if (OpenGlHelper.isFramebufferEnabled())
         {
-            OpenGlHelper.func_153171_g(OpenGlHelper.field_153198_e, 0);
+            OpenGlHelper.glBinDframeBuffer(OpenGlHelper.glFrameBuffer, 0);
         }
     }
 
@@ -211,8 +330,15 @@
         this.framebufferColor[3] = p_147604_4_;
     }
 
-    public void framebufferRender(int p_147615_1_, int p_147615_2_)
+    public void framebufferRender(int width, int height)
+    {
+	/** MINECRIFT */
+        framebufferRender(0, width, height, 0);
+    }
+
+    public void framebufferRender(int left, int width, int height, int top)
     {
+	/** END MINECRIFT */
         if (OpenGlHelper.isFramebufferEnabled())
         {
             GL11.glColorMask(true, true, true, false);
@@ -220,33 +346,37 @@
             GL11.glDepthMask(false);
             GL11.glMatrixMode(GL11.GL_PROJECTION);
             GL11.glLoadIdentity();
-            GL11.glOrtho(0.0D, (double)p_147615_1_, (double)p_147615_2_, 0.0D, 1000.0D, 3000.0D);
+            GL11.glOrtho(0.0D, (double)width, (double)height, 0.0D, 1000.0D, 3000.0D);
             GL11.glMatrixMode(GL11.GL_MODELVIEW);
             GL11.glLoadIdentity();
-            GL11.glTranslatef(0.0F, 0.0F, -2000.0F);
-            GL11.glViewport(0, 0, p_147615_1_, p_147615_2_);
-            GL11.glEnable(GL11.GL_TEXTURE_2D);
-            GL11.glDisable(GL11.GL_LIGHTING);
-            GL11.glDisable(GL11.GL_ALPHA_TEST);
-            GL11.glDisable(GL11.GL_BLEND);
-            GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
-            GL11.glEnable(GL11.GL_COLOR_MATERIAL);
-            this.bindFramebufferTexture();
-            float var3 = (float)p_147615_1_;
-            float var4 = (float)p_147615_2_;
-            float var5 = (float)this.framebufferWidth / (float)this.framebufferTextureWidth;
-            float var6 = (float)this.framebufferHeight / (float)this.framebufferTextureHeight;
-            Tessellator var7 = Tessellator.instance;
-            var7.startDrawingQuads();
-            var7.setColorOpaque_I(-1);
-            var7.addVertexWithUV(0.0D, (double)var4, 0.0D, 0.0D, 0.0D);
-            var7.addVertexWithUV((double)var3, (double)var4, 0.0D, (double)var5, 0.0D);
-            var7.addVertexWithUV((double)var3, 0.0D, 0.0D, (double)var5, (double)var6);
-            var7.addVertexWithUV(0.0D, 0.0D, 0.0D, 0.0D, (double)var6);
-            var7.draw();
-            this.unbindFramebufferTexture();
-            GL11.glDepthMask(true);
-            GL11.glColorMask(true, true, true, true);
+            GL11.glPushMatrix();
+	            GL11.glTranslatef(0.0F, 0.0F, -2000.0F);
+				/** MINECRIFT */
+	            GL11.glViewport(left, top, width, height);
+	            GL11.glEnable(this.textureType);
+				/** END MINECRIFT */
+	            GL11.glDisable(GL11.GL_LIGHTING);
+	            GL11.glDisable(GL11.GL_ALPHA_TEST);
+	            GL11.glDisable(GL11.GL_BLEND);
+	            GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
+	            GL11.glEnable(GL11.GL_COLOR_MATERIAL);
+	            this.bindFramebufferTexture();
+	            float var3 = (float)width;
+	            float var4 = (float)height;
+	            float var5 = (float)this.framebufferWidth / (float)this.framebufferTextureWidth;
+	            float var6 = (float)this.framebufferHeight / (float)this.framebufferTextureHeight;
+	            Tessellator var7 = Tessellator.instance;
+	            var7.startDrawingQuads();
+	            var7.setColorOpaque_I(-1);
+	            var7.addVertexWithUV(0.0D, (double)var4, 0.0D, 0.0D, 0.0D);
+	            var7.addVertexWithUV((double)var3, (double)var4, 0.0D, (double)var5, 0.0D);
+	            var7.addVertexWithUV((double)var3, 0.0D, 0.0D, (double)var5, (double)var6);
+	            var7.addVertexWithUV(0.0D, 0.0D, 0.0D, 0.0D, (double)var6);
+	            var7.draw();
+	            this.unbindFramebufferTexture();
+	            GL11.glDepthMask(true);
+	            GL11.glColorMask(true, true, true, true);
+	         GL11.glPopMatrix();
         }
     }
 
@@ -265,4 +395,69 @@
         GL11.glClear(var1);
         this.unbindFramebuffer();
     }
+
+	/** MINECRIFT ADDITIONS BELOW */
+	
+    public void genRenderBufferStorageMultisample(int target, int format, int width, int height)
+    {
+        if (OpenGlHelper.framebufferSupported)
+        {
+            ContextCapabilities contextcapabilities = GLContext.getCapabilities();
+            int callType = 0;
+            if (contextcapabilities.OpenGL30)
+            {
+                callType = 0;
+            }
+            else if (contextcapabilities.GL_ARB_framebuffer_object)
+            {
+                callType = 1;
+            }
+            else if (contextcapabilities.GL_EXT_framebuffer_object)
+            {
+                callType = 2;
+            }
+
+            switch (callType)
+            {
+                case 0:
+                    if (!this.multiSample) {
+                        GL30.glRenderbufferStorage(target, format, width, height);
+                    }
+                    else {
+                        GL30.glRenderbufferStorageMultisample(target, this.multiSampleCount, format, width, height);
+                    }
+                    break;
+                case 1:
+                    ARBFramebufferObject.glRenderbufferStorage(target, format, width, height);
+                    break;
+                case 2:
+                    EXTFramebufferObject.glRenderbufferStorageEXT(target, format, width, height);
+            }
+        }
+    }
+
+	public void attachColorTex(int id)
+    {
+            OpenGlHelper.glFrameBufferTexture2D(OpenGlHelper.glFrameBuffer, OpenGlHelper.glColorAttachment0, this.textureType, id, 0);    // GL30.glFramebufferTexture2D
+	}
+
+    public int getFramebufferType()
+    {
+        return OpenGlHelper.glFrameBuffer; // GL_FRAMEBUFFER (draw framebuffer)
+    }
+
+    public int getFramebufferId()
+    {
+        return this.framebufferObject;
+    }
+
+    public String toString()
+    {
+        StringBuilder sb = new StringBuilder();
+        sb.append("MC FBO: " + _name).append("\n");
+        sb.append("Size:   " + framebufferWidth + " x " + framebufferHeight).append("\n");
+        sb.append("FB ID:  " + framebufferObject).append("\n");
+        sb.append("Tex ID: " + framebufferTextures[0]).append("\n");
+        return sb.toString();
+    }
 }
