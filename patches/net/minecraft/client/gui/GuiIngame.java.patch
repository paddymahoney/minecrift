--- a/net/minecraft/client/gui/GuiIngame.java
+++ b/net/minecraft/client/gui/GuiIngame.java
@@ -5,8 +5,11 @@
 import java.util.Iterator;
 import java.util.List;
 import java.util.Random;
+
+import de.fruitfly.ovr.OculusRift;
 import net.minecraft.block.material.Material;
 import net.minecraft.client.Minecraft;
+import net.minecraft.client.Minecraft.renderPass;
 import net.minecraft.client.network.NetHandlerPlayClient;
 import net.minecraft.client.renderer.OpenGlHelper;
 import net.minecraft.client.renderer.RenderHelper;
@@ -28,6 +31,7 @@
 import net.minecraft.scoreboard.ScoreObjective;
 import net.minecraft.scoreboard.ScorePlayerTeam;
 import net.minecraft.scoreboard.Scoreboard;
+import net.minecraft.src.Reflector;
 import net.minecraft.util.Direction;
 import net.minecraft.util.EnumChatFormatting;
 import net.minecraft.util.FoodStats;
@@ -35,40 +39,46 @@
 import net.minecraft.util.MathHelper;
 import net.minecraft.util.ResourceLocation;
 import net.minecraft.util.StringUtils;
+import net.minecraft.util.Vec3;
 import net.minecraft.world.EnumSkyBlock;
 import net.minecraft.world.chunk.Chunk;
 import org.lwjgl.opengl.GL11;
 import org.lwjgl.opengl.GL12;
 
+import com.mtbs3d.minecrift.provider.MCOpenVR;
+import com.mtbs3d.minecrift.render.OpenGLdebugging;
+
 public class GuiIngame extends Gui
 {
-    private static final ResourceLocation vignetteTexPath = new ResourceLocation("textures/misc/vignette.png");
-    private static final ResourceLocation widgetsTexPath = new ResourceLocation("textures/gui/widgets.png");
-    private static final ResourceLocation pumpkinBlurTexPath = new ResourceLocation("textures/misc/pumpkinblur.png");
-    private static final RenderItem itemRenderer = new RenderItem();
-    private final Random rand = new Random();
-    private final Minecraft mc;
+	/** MINECRIFT FORGE **/
+    protected static final ResourceLocation vignetteTexPath = new ResourceLocation("textures/misc/vignette.png");
+    protected static final ResourceLocation widgetsTexPath = new ResourceLocation("textures/gui/widgets.png");
+    protected static final ResourceLocation pumpkinBlurTexPath = new ResourceLocation("textures/misc/pumpkinblur.png");
+    protected static final RenderItem itemRenderer = new RenderItem();
+    protected final Random rand = new Random();
+    protected final Minecraft mc;
 
     /** ChatGUI instance that retains all previous chat data */
-    private final GuiNewChat persistantChatGUI;
-    private final GuiStreamIndicator streamIndicator;
-    private int updateCounter;
+    protected final GuiNewChat persistantChatGUI;
+    protected final GuiStreamIndicator streamIndicator;
+    protected int updateCounter;
 
     /** The string specifying which record music is playing */
-    private String recordPlaying = "";
+    protected String recordPlaying = "";
 
     /** How many ticks the record playing message will be displayed */
-    private int recordPlayingUpFor;
-    private boolean recordIsPlaying;
+    protected int recordPlayingUpFor;
+    protected boolean recordIsPlaying;
 
     /** Previous frame vignette brightness (slowly changes by 1% each frame) */
     public float prevVignetteBrightness = 1.0F;
 
     /** Remaining ticks the item highlight should be visible */
-    private int remainingHighlightTicks;
+    protected int remainingHighlightTicks;
 
     /** The ItemStack that is currently being highlighted */
-    private ItemStack highlightingItemStack;
+    protected ItemStack highlightingItemStack;
+	/** END MINECRIFT FORGE **/
     private static final String __OBFID = "CL_00000661";
 
     public GuiIngame(Minecraft p_i46379_1_)
@@ -78,21 +88,49 @@
         this.streamIndicator = new GuiStreamIndicator(this.mc);
     }
 
+    public String v3Format(Vec3 in){
+    	String frmat = "%.2f";
+        return "(" + String.format(frmat, in.xCoord) + ", " + String.format(frmat, in.yCoord)+ ", " + String.format(frmat, in.zCoord)+ ")";
+    }
+    
+	public void drawMouseMenuQuad(int mouseX, int mouseY)
+	{
+		GL11.glEnable(GL11.GL_BLEND);
+		OpenGlHelper.glBlendFunc(GL11.GL_ONE_MINUS_DST_COLOR, GL11.GL_ONE_MINUS_SRC_COLOR, 1, 0); //color blend for corsshair transparency
+		GL11.glDisable(GL11.GL_DEPTH_TEST); //no occlusion on menu cursor		
+		GL11.glDisable(GL11.GL_LIGHTING);
+		GL11.glEnable(GL11.GL_TEXTURE_2D);
+		GL11.glDisable(GL11.GL_ALPHA_TEST);
+		GL11.glColorMask(true,  true,  true,  false); // DISBALE CHANIGNG UNDERLYING ALPHA VALUE
+		GL11.glColor4f(1f, 1f, 1f, 1f);
+		this.mc.mcProfiler.endStartSection("mouse pointer");
+		this.mc.getTextureManager().bindTexture(Gui.icons);
+		float menuMousePointerSize = 16f * this.mc.vrSettings.menuCrosshairScale;
+		this.mc.ingameGUI.drawCentredTexturedModalRect(mouseX, mouseY, menuMousePointerSize, menuMousePointerSize, 0, 0, 15, 15);
+        GL11.glBlendFunc(GL11.GL_SRC_ALPHA, GL11.GL_ONE_MINUS_SRC_ALPHA); //back to normal alpha mode.
+		GL11.glDisable(GL11.GL_BLEND);
+		GL11.glEnable(GL11.GL_DEPTH_TEST);
+		GL11.glEnable(GL11.GL_LIGHTING);
+		GL11.glEnable(GL11.GL_ALPHA_TEST);
+
+		GL11.glColorMask(true,  true,  true,  true); // ENABLE CHANIGNG UNDERLYING ALPHA VALUE
+	}
+    
     /**
      * Render the ingame overlay with quick icon bar, ...
      */
     public void renderGameOverlay(float p_73830_1_, boolean p_73830_2_, int p_73830_3_, int p_73830_4_)
     {
         ScaledResolution var5 = new ScaledResolution(this.mc, this.mc.displayWidth, this.mc.displayHeight);
-        int var6 = var5.getScaledWidth();
-        int var7 = var5.getScaledHeight();
+        int width = var5.getScaledWidth();
+        int height = var5.getScaledHeight();
         FontRenderer var8 = this.mc.fontRendererObj;
         this.mc.entityRenderer.setupOverlayRendering();
         GL11.glEnable(GL11.GL_BLEND);
 
         if (Minecraft.isFancyGraphicsEnabled())
         {
-            this.renderVignette(this.mc.thePlayer.getBrightness(p_73830_1_), var6, var7);
+            this.renderVignette(this.mc.thePlayer.getBrightness(p_73830_1_), width, height);
         }
         else
         {
@@ -103,59 +141,77 @@
 
         if (this.mc.gameSettings.thirdPersonView == 0 && var9 != null && var9.getItem() == Item.getItemFromBlock(Blocks.pumpkin))
         {
-            this.renderPumpkinBlur(var6, var7);
+            this.renderPumpkinBlur(width, height);
         }
 
-        if (!this.mc.thePlayer.isPotionActive(Potion.confusion))
-        {
-            float var10 = this.mc.thePlayer.prevTimeInPortal + (this.mc.thePlayer.timeInPortal - this.mc.thePlayer.prevTimeInPortal) * p_73830_1_;
-
-            if (var10 > 0.0F)
-            {
-                this.func_130015_b(var10, var6, var7);
-            }
-        }
+        //VIVE move to FP overlay
+//        if (!this.mc.thePlayer.isPotionActive(Potion.confusion))
+//        {
+//            float var10 = this.mc.thePlayer.prevTimeInPortal + (this.mc.thePlayer.timeInPortal - this.mc.thePlayer.prevTimeInPortal) * p_73830_1_;
+//
+//            if (var10 > 0.0F)
+//            {
+//                this.renderPortal(var10, width, height);
+//            }
+//        }
 
         int var11;
         int var12;
         int var13;
 
         if (!this.mc.playerController.enableEverythingIsScrewedUpMode())
-        {
-            GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
+        { //render HUD
+            
+        	GL11.glColor4f(1F,1f,1F,1F);
+            GL11.glDisable(GL11.GL_DEPTH_TEST);
+            GL11.glEnable(GL11.GL_ALPHA_TEST);
+            GL11.glDisable(GL11.GL_BLEND);
+            
             this.mc.getTextureManager().bindTexture(widgetsTexPath);
-            InventoryPlayer var31 = this.mc.thePlayer.inventory;
+            InventoryPlayer inventory = this.mc.thePlayer.inventory;
             this.zLevel = -90.0F;
-            this.drawTexturedModalRect(var6 / 2 - 91, var7 - 22, 0, 0, 182, 22);
-            this.drawTexturedModalRect(var6 / 2 - 91 - 1 + var31.currentItem * 20, var7 - 22 - 1, 0, 22, 24, 22);
+            
+            this.drawTexturedModalRect(width / 2 - 91, height - 22, 0, 0, 182, 22);
+            this.drawTexturedModalRect(width / 2 - 91 - 1 + inventory.currentItem * 20, height - 22 - 1, 0, 22, 24, 22);
+            
+                 
             this.mc.getTextureManager().bindTexture(icons);
+            
             GL11.glEnable(GL11.GL_BLEND);
-            OpenGlHelper.glBlendFunc(775, 769, 1, 0);
-            this.drawTexturedModalRect(var6 / 2 - 7, var7 / 2 - 7, 0, 0, 16, 16);
+            GL11.glEnable(GL11.GL_DEPTH_TEST);
+            GL11.glEnable(GL11.GL_ALPHA_TEST);
+        
+            /** MINECRIFT ** - don't render the normal crosshair
+       		OpenGlHelper.glBlendFunc(775, 769, 1, 0);
+          	this.drawTexturedModalRect(var6 / 2 - 7, var7 / 2 - 7, 0, 0, 16, 16);
+			** END MINECRIFT **/
+			
+
             OpenGlHelper.glBlendFunc(770, 771, 1, 0);
             this.mc.mcProfiler.startSection("bossHealth");
-            this.renderBossHealth();
+            	this.renderBossHealth();
             this.mc.mcProfiler.endSection();
 
             if (this.mc.playerController.shouldDrawHUD())
             {
-                this.renderIcons(var6, var7);
+                this.renderIcons(width, height);
             }
 
             this.mc.mcProfiler.startSection("actionBar");
-            GL11.glEnable(GL12.GL_RESCALE_NORMAL);
-            RenderHelper.enableGUIStandardItemLighting();
-
-            for (var11 = 0; var11 < 9; ++var11)
-            {
-                var12 = var6 / 2 - 90 + var11 * 20 + 2;
-                var13 = var7 - 16 - 3;
-                this.renderInventorySlot(var11, var12, var13, p_73830_1_);
-            }
-
-            RenderHelper.disableStandardItemLighting();
-            GL11.glDisable(GL12.GL_RESCALE_NORMAL);
+	            GL11.glEnable(GL12.GL_RESCALE_NORMAL);
+	            RenderHelper.enableGUIStandardItemLighting();
+	
+	            for (var11 = 0; var11 < 9; ++var11)
+	            {
+	                var12 = width / 2 - 90 + var11 * 20 + 2;
+	                var13 = height - 16 - 3;
+	                this.renderInventorySlot(var11, var12, var13, p_73830_1_);
+	            }
+	
+	            RenderHelper.disableStandardItemLighting();
+	            GL11.glDisable(GL12.GL_RESCALE_NORMAL);
             this.mc.mcProfiler.endSection();
+
             GL11.glDisable(GL11.GL_BLEND);
         }
 
@@ -175,7 +231,7 @@
             }
 
             var12 = (int)(220.0F * var33) << 24 | 1052704;
-            drawRect(0, 0, var6, var7, var12);
+            drawRect(0, 0, width, height, var12);
             GL11.glEnable(GL11.GL_ALPHA_TEST);
             GL11.glEnable(GL11.GL_DEPTH_TEST);
             this.mc.mcProfiler.endSection();
@@ -183,7 +239,7 @@
 
         var32 = 16777215;
         GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
-        var11 = var6 / 2 - 91;
+        var11 = width / 2 - 91;
         int var14;
         int var15;
         int var16;
@@ -198,7 +254,7 @@
             var34 = this.mc.thePlayer.getHorseJumpPower();
             var38 = 182;
             var14 = (int)(var34 * (float)(var38 + 1));
-            var15 = var7 - 32 + 3;
+            var15 = height - 32 + 3;
             this.drawTexturedModalRect(var11, var15, 0, 84, var38, 5);
 
             if (var14 > 0)
@@ -218,7 +274,7 @@
             {
                 var38 = 182;
                 var14 = (int)(this.mc.thePlayer.experience * (float)(var38 + 1));
-                var15 = var7 - 32 + 3;
+                var15 = height - 32 + 3;
                 this.drawTexturedModalRect(var11, var15, 0, 64, var38, 5);
 
                 if (var14 > 0)
@@ -235,8 +291,8 @@
                 boolean var39 = false;
                 var14 = var39 ? 16777215 : 8453920;
                 String var43 = "" + this.mc.thePlayer.experienceLevel;
-                var16 = (var6 - var8.getStringWidth(var43)) / 2;
-                var17 = var7 - 31 - 4;
+                var16 = (width - var8.getStringWidth(var43)) / 2;
+                var17 = height - 31 - 4;
                 boolean var18 = false;
                 var8.drawString(var43, var16 + 1, var17, 0);
                 var8.drawString(var43, var16 - 1, var17, 0);
@@ -256,8 +312,8 @@
             if (this.remainingHighlightTicks > 0 && this.highlightingItemStack != null)
             {
                 var35 = this.highlightingItemStack.getDisplayName();
-                var13 = (var6 - var8.getStringWidth(var35)) / 2;
-                var14 = var7 - 59;
+                var13 = (width - var8.getStringWidth(var35)) / 2;
+                var14 = height - 59;
 
                 if (!this.mc.playerController.shouldDrawHUD())
                 {
@@ -300,7 +356,7 @@
             }
 
             var13 = var8.getStringWidth(var35);
-            var8.drawStringWithShadow(var35, var6 - var13 - 10, 5, 16777215);
+            var8.drawStringWithShadow(var35, width - var13 - 10, 5, 16777215);
             this.mc.mcProfiler.endSection();
         }
 
@@ -312,26 +368,44 @@
         {
             this.mc.mcProfiler.startSection("debug");
             GL11.glPushMatrix();
-            var8.drawStringWithShadow("Minecraft 1.7.10 (" + this.mc.debug + ")", 2, 2, 16777215);
-            var8.drawStringWithShadow(this.mc.debugInfoRenders(), 2, 12, 16777215);
-            var8.drawStringWithShadow(this.mc.getEntityDebug(), 2, 22, 16777215);
-            var8.drawStringWithShadow(this.mc.debugInfoEntities(), 2, 32, 16777215);
-            var8.drawStringWithShadow(this.mc.getWorldProviderName(), 2, 42, 16777215);
+			/** MINECRIFT **/
+            var8.drawStringWithShadow(this.mc.minecriftVerString + ", " + "J/OpenVR 1.0.2" , 2, 2, 16777215);
+			/** END MINECRIFT **/ 
+			var8.drawStringWithShadow(this.mc.debug, 2, 12, 16777215);
+            var8.drawStringWithShadow(this.mc.debugInfoRenders(), 2, 22, 16777215);
+            var8.drawStringWithShadow(this.mc.getEntityDebug(), 2, 32, 16777215);
+            var8.drawStringWithShadow(this.mc.debugInfoEntities(), 2, 42, 16777215);
+            var8.drawStringWithShadow(this.mc.getWorldProviderName(), 2, 52, 16777215);
             long var36 = Runtime.getRuntime().maxMemory();
             long var41 = Runtime.getRuntime().totalMemory();
             long var44 = Runtime.getRuntime().freeMemory();
             long var45 = var41 - var44;
             String var20 = "Used memory: " + var45 * 100L / var36 + "% (" + var45 / 1024L / 1024L + "MB) of " + var36 / 1024L / 1024L + "MB";
             var21 = 14737632;
-            this.drawString(var8, var20, var6 - var8.getStringWidth(var20) - 2, 2, 14737632);
+            this.drawString(var8, var20, width - var8.getStringWidth(var20) - 2, 12, 14737632);
             var20 = "Allocated memory: " + var41 * 100L / var36 + "% (" + var41 / 1024L / 1024L + "MB)";
-            this.drawString(var8, var20, var6 - var8.getStringWidth(var20) - 2, 12, 14737632);
+            this.drawString(var8, var20, width - var8.getStringWidth(var20) - 2, 22, 14737632);
+        
+            /** MINECRIFT FORGE **/
+			Object fmlCommonHandler = null;
+            if( Reflector.FMLCommonHandler_instance.exists()) {
+                fmlCommonHandler = Reflector.call( Reflector.FMLCommonHandler_instance, new Object[0]);
+            }
+            if( fmlCommonHandler != null) {
+                int offset = 22;
+                for (String brd : (List<String>)Reflector.call(fmlCommonHandler, Reflector.FMLCommonHandler_getBrandings, new Object[] {false}))
+                {
+                    this.drawString(var8, brd, width - var8.getStringWidth(brd) - 2, offset+=10, 14737632);
+                }
+            }
+			/** END MINECRIFT FORGE **/
+            
             var22 = MathHelper.floor_double(this.mc.thePlayer.posX);
             var23 = MathHelper.floor_double(this.mc.thePlayer.posY);
             int var24 = MathHelper.floor_double(this.mc.thePlayer.posZ);
-            this.drawString(var8, String.format("x: %.5f (%d) // c: %d (%d)", new Object[] {Double.valueOf(this.mc.thePlayer.posX), Integer.valueOf(var22), Integer.valueOf(var22 >> 4), Integer.valueOf(var22 & 15)}), 2, 64, 14737632);
-            this.drawString(var8, String.format("y: %.3f (feet pos, %.3f eyes pos)", new Object[] {Double.valueOf(this.mc.thePlayer.boundingBox.minY), Double.valueOf(this.mc.thePlayer.posY)}), 2, 72, 14737632);
-            this.drawString(var8, String.format("z: %.5f (%d) // c: %d (%d)", new Object[] {Double.valueOf(this.mc.thePlayer.posZ), Integer.valueOf(var24), Integer.valueOf(var24 >> 4), Integer.valueOf(var24 & 15)}), 2, 80, 14737632);
+            this.drawString(var8, String.format("x: %.2f (%d) // c: %d (%d)", new Object[] {Double.valueOf(this.mc.thePlayer.posX), Integer.valueOf(var22), Integer.valueOf(var22 >> 4), Integer.valueOf(var22 & 15)}), 2, 64, 14737632);
+            this.drawString(var8, String.format("y: %.2f (feet pos, %.2f eyes pos)", new Object[] {Double.valueOf(this.mc.thePlayer.boundingBox.minY), Double.valueOf(this.mc.thePlayer.posY)}), 2, 72, 14737632);
+            this.drawString(var8, String.format("z: %.2f (%d) // c: %d (%d)", new Object[] {Double.valueOf(this.mc.thePlayer.posZ), Integer.valueOf(var24), Integer.valueOf(var24 >> 4), Integer.valueOf(var24 & 15)}), 2, 80, 14737632);
             int var25 = MathHelper.floor_double((double)(this.mc.thePlayer.rotationYaw * 4.0F / 360.0F) + 0.5D) & 3;
             this.drawString(var8, "f: " + var25 + " (" + Direction.directions[var25] + ") / " + MathHelper.wrapAngleTo180_float(this.mc.thePlayer.rotationYaw), 2, 88, 14737632);
 
@@ -347,11 +421,29 @@
             {
                 this.drawString(var8, String.format("shader: %s", new Object[] {this.mc.entityRenderer.getShaderGroup().getShaderGroupName()}), 2, 112, 14737632);
             }
+            if(true){
+            this.drawString(var8,"Room: " + v3Format( mc.roomScale.getRoomOriginPos_World()) , 2, 124, 14737632);
+            this.drawString(var8,"HMD: " + v3Format(mc.roomScale.getHMDPos_Room()) + v3Format(mc.roomScale.getHMDPos_World()) , 2, 132, 14737632);
+            this.drawString(var8,"Main: " +v3Format( mc.roomScale.getControllerPos_Room(0) )+ v3Format(mc.roomScale.getControllerPos_World(0)) , 2, 140, 14737632);
+            this.drawString(var8,"Offhand: " +v3Format( mc.roomScale.getControllerPos_Room(1)) + v3Format(mc.roomScale.getControllerPos_World(1)) , 2, 148, 14737632);
+            this.drawString(var8,"Player: "  + v3Format(mc.roomScale.getRoomOriginPos_World().subtract(mc.entityRenderer.interpolatedPlayerPos)) + v3Format(mc.entityRenderer.interpolatedPlayerPos) , 2, 156	, 14737632);
+            this.drawString(var8,"Crosshair: " + v3Format(mc.entityRenderer.crossVec) , 2, 164	, 14737632);
+            this.drawString(var8,"HMD Look: " +v3Format( mc.roomScale.getHMDDir_World()) , 2, 172	, 14737632);
+            this.drawString(var8,"Main Look: " + v3Format(mc.roomScale.getControllerMainDir_World()), 2, 180	, 14737632);
+            this.drawString(var8,"Offhand Look: " + v3Format(mc.roomScale.getControllerOffhandDir_World()) , 2, 188	, 14737632);
+            this.drawString(var8,"World Scale: " + mc.vrSettings.vrWorldScale + " World Rotation " + mc.vrSettings.vrWorldRotation , 2, 196	, 14737632);
+ //           this.drawString(var8,"Gui " + MCOpenVR.guiPos_World.x + " " + MCOpenVR.guiPos_World.y + " " + MCOpenVR.guiPos_World.z, 2, 204	, 14737632);
+            this.drawString(var8,"Swing " + mc.vrPlayer.tickDist * 20, 2, 204	, 14737632);
+            this.drawString(var8,"R Touchpad x " + String.format("%.2f",MCOpenVR.rtbX) + " y " + String.format("%.2f",MCOpenVR.rtbY), 2, 212	, 14737632);
+            this.drawString(var8,"3rd Person Camera: " + v3Format(mc.entityRenderer.getEyeRenderPos(renderPass.Third)), 2, 220	, 14737632);
+            //this.drawString(var8,"Depth: " + mc.getDepthOfPosition(mc.roomScale.getHMDPos_World()), 2, 228	, 14737632);
+            
+            }
 
             GL11.glPopMatrix();
             this.mc.mcProfiler.endSection();
         }
-
+       
         if (this.recordPlayingUpFor > 0)
         {
             this.mc.mcProfiler.startSection("overlayMessage");
@@ -366,7 +458,7 @@
             if (var13 > 8)
             {
                 GL11.glPushMatrix();
-                GL11.glTranslatef((float)(var6 / 2), (float)(var7 - 68), 0.0F);
+                GL11.glTranslatef((float)(width / 2), (float)(height - 68), 0.0F);
                 GL11.glEnable(GL11.GL_BLEND);
                 OpenGlHelper.glBlendFunc(770, 771, 1, 0);
                 var14 = 16777215;
@@ -388,14 +480,14 @@
 
         if (var37 != null)
         {
-            this.renderScoreboard(var37, var7, var6, var8);
+            this.renderScoreboard(var37, height, width, var8);
         }
 
         GL11.glEnable(GL11.GL_BLEND);
         OpenGlHelper.glBlendFunc(770, 771, 1, 0);
         GL11.glDisable(GL11.GL_ALPHA_TEST);
         GL11.glPushMatrix();
-        GL11.glTranslatef(0.0F, (float)(var7 - 48), 0.0F);
+        GL11.glTranslatef(0.0F, (float)(height - 48), 0.0F);
         this.mc.mcProfiler.startSection("chat");
         this.persistantChatGUI.drawChat(this.updateCounter);
         this.mc.mcProfiler.endSection();
@@ -422,7 +514,7 @@
                 var46 = 150;
             }
 
-            int var19 = (var6 - var17 * var46) / 2;
+            int var19 = (width - var17 * var46) / 2;
             byte var47 = 10;
             drawRect(var19 - 1, var47 - 1, var19 + var46 * var17, var47 + 9 * var16, Integer.MIN_VALUE);
 
@@ -501,9 +593,10 @@
     {
         this.streamIndicator.render((int)(p_152126_1_ - 10.0F), 10);
     }
-
-    private void renderScoreboard(ScoreObjective p_96136_1_, int p_96136_2_, int p_96136_3_, FontRenderer p_96136_4_)
-    {
+	/** MINECRIFT FORGE **/
+    protected void renderScoreboard(ScoreObjective p_96136_1_, int p_96136_2_, int p_96136_3_, FontRenderer p_96136_4_)
+    /** END MINECRIFT FORGE **/
+	{
         Scoreboard var5 = p_96136_1_.getScoreboard();
         Collection var6 = var5.getSortedScores(p_96136_1_);
 
@@ -549,9 +642,10 @@
             }
         }
     }
-
-    private void renderIcons(int p_110327_1_, int p_110327_2_)
-    {
+	/** MINECRIFT FORGE **/
+    protected void renderIcons(int width, int height)
+    /** END MINECRIFT FORGE **/
+	{
         boolean var3 = this.mc.thePlayer.hurtResistantTime / 3 % 2 == 1;
 
         if (this.mc.thePlayer.hurtResistantTime < 10)
@@ -559,52 +653,52 @@
             var3 = false;
         }
 
-        int var4 = MathHelper.ceiling_float_int(this.mc.thePlayer.getHealth());
-        int var5 = MathHelper.ceiling_float_int(this.mc.thePlayer.prevHealth);
+        int health = MathHelper.ceiling_float_int(this.mc.thePlayer.getHealth());
+        int prevhealth = MathHelper.ceiling_float_int(this.mc.thePlayer.prevHealth);
         this.rand.setSeed((long)(this.updateCounter * 312871));
         boolean var6 = false;
-        FoodStats var7 = this.mc.thePlayer.getFoodStats();
-        int var8 = var7.getFoodLevel();
-        int var9 = var7.getPrevFoodLevel();
-        IAttributeInstance var10 = this.mc.thePlayer.getEntityAttribute(SharedMonsterAttributes.maxHealth);
-        int var11 = p_110327_1_ / 2 - 91;
-        int var12 = p_110327_1_ / 2 + 91;
-        int var13 = p_110327_2_ - 39;
-        float var14 = (float)var10.getAttributeValue();
-        float var15 = this.mc.thePlayer.getAbsorptionAmount();
-        int var16 = MathHelper.ceiling_float_int((var14 + var15) / 2.0F / 10.0F);
-        int var17 = Math.max(10 - (var16 - 2), 3);
-        int var18 = var13 - (var16 - 1) * var17 - 10;
-        float var19 = var15;
-        int var20 = this.mc.thePlayer.getTotalArmorValue();
+        FoodStats food = this.mc.thePlayer.getFoodStats();
+        int foodlevel = food.getFoodLevel();
+        int prevfoodlevel = food.getPrevFoodLevel();
+        IAttributeInstance maxhealthattrib = this.mc.thePlayer.getEntityAttribute(SharedMonsterAttributes.maxHealth);
+        int var11 = width / 2 - 91;
+        int var12 = width / 2 + 91;
+        int var13 = height - 39;
+        float maxhealth = (float)maxhealthattrib.getAttributeValue();
+        float absorption = this.mc.thePlayer.getAbsorptionAmount();
+        int totalhealth = MathHelper.ceiling_float_int((maxhealth + absorption) / 2.0F / 10.0F);
+        int var17 = Math.max(10 - (totalhealth - 2), 3);
+        int var18 = var13 - (totalhealth - 1) * var17 - 10;
+        float var19 = absorption;
+        int totaarmor = this.mc.thePlayer.getTotalArmorValue();
         int var21 = -1;
 
         if (this.mc.thePlayer.isPotionActive(Potion.regeneration))
         {
-            var21 = this.updateCounter % MathHelper.ceiling_float_int(var14 + 5.0F);
+            var21 = this.updateCounter % MathHelper.ceiling_float_int(maxhealth + 5.0F);
         }
 
         this.mc.mcProfiler.startSection("armor");
-        int var22;
+        int i;
         int var23;
 
-        for (var22 = 0; var22 < 10; ++var22)
+        for (i = 0; i < 10; ++i)
         {
-            if (var20 > 0)
+            if (totaarmor > 0)
             {
-                var23 = var11 + var22 * 8;
+                var23 = var11 + i * 8;
 
-                if (var22 * 2 + 1 < var20)
+                if (i * 2 + 1 < totaarmor)
                 {
                     this.drawTexturedModalRect(var23, var18, 34, 9, 9, 9);
                 }
 
-                if (var22 * 2 + 1 == var20)
+                if (i * 2 + 1 == totaarmor)
                 {
                     this.drawTexturedModalRect(var23, var18, 25, 9, 9, 9);
                 }
 
-                if (var22 * 2 + 1 > var20)
+                if (i * 2 + 1 > totaarmor)
                 {
                     this.drawTexturedModalRect(var23, var18, 16, 9, 9, 9);
                 }
@@ -616,7 +710,7 @@
         int var26;
         int var27;
 
-        for (var22 = MathHelper.ceiling_float_int((var14 + var15) / 2.0F) - 1; var22 >= 0; --var22)
+        for (i = MathHelper.ceiling_float_int((maxhealth + absorption) / 2.0F) - 1; i >= 0; --i)
         {
             var23 = 16;
 
@@ -636,16 +730,16 @@
                 var24 = 1;
             }
 
-            var25 = MathHelper.ceiling_float_int((float)(var22 + 1) / 10.0F) - 1;
-            var26 = var11 + var22 % 10 * 8;
+            var25 = MathHelper.ceiling_float_int((float)(i + 1) / 10.0F) - 1;
+            var26 = var11 + i % 10 * 8;
             var27 = var13 - var25 * var17;
 
-            if (var4 <= 4)
+            if (health <= 4)
             {
                 var27 += this.rand.nextInt(2);
             }
 
-            if (var22 == var21)
+            if (i == var21)
             {
                 var27 -= 2;
             }
@@ -661,12 +755,12 @@
 
             if (var3)
             {
-                if (var22 * 2 + 1 < var5)
+                if (i * 2 + 1 < prevhealth)
                 {
                     this.drawTexturedModalRect(var26, var27, var23 + 54, 9 * var28, 9, 9);
                 }
 
-                if (var22 * 2 + 1 == var5)
+                if (i * 2 + 1 == prevhealth)
                 {
                     this.drawTexturedModalRect(var26, var27, var23 + 63, 9 * var28, 9, 9);
                 }
@@ -674,7 +768,7 @@
 
             if (var19 > 0.0F)
             {
-                if (var19 == var15 && var15 % 2.0F == 1.0F)
+                if (var19 == absorption && absorption % 2.0F == 1.0F)
                 {
                     this.drawTexturedModalRect(var26, var27, var23 + 153, 9 * var28, 9, 9);
                 }
@@ -687,22 +781,22 @@
             }
             else
             {
-                if (var22 * 2 + 1 < var4)
+                if (i * 2 + 1 < health)
                 {
                     this.drawTexturedModalRect(var26, var27, var23 + 36, 9 * var28, 9, 9);
                 }
 
-                if (var22 * 2 + 1 == var4)
+                if (i * 2 + 1 == health)
                 {
                     this.drawTexturedModalRect(var26, var27, var23 + 45, 9 * var28, 9, 9);
                 }
             }
         }
 
-        Entity var34 = this.mc.thePlayer.ridingEntity;
+        Entity ridingentity = this.mc.thePlayer.ridingEntity;
         int var36;
 
-        if (var34 == null)
+        if (ridingentity == null)
         {
             this.mc.mcProfiler.endStartSection("food");
 
@@ -718,7 +812,7 @@
                     var38 = 13;
                 }
 
-                if (this.mc.thePlayer.getFoodStats().getSaturationLevel() <= 0.0F && this.updateCounter % (var8 * 3 + 1) == 0)
+                if (this.mc.thePlayer.getFoodStats().getSaturationLevel() <= 0.0F && this.updateCounter % (foodlevel * 3 + 1) == 0)
                 {
                     var36 = var13 + (this.rand.nextInt(3) - 1);
                 }
@@ -733,32 +827,32 @@
 
                 if (var6)
                 {
-                    if (var23 * 2 + 1 < var9)
+                    if (var23 * 2 + 1 < prevfoodlevel)
                     {
                         this.drawTexturedModalRect(var27, var36, var25 + 54, 27, 9, 9);
                     }
 
-                    if (var23 * 2 + 1 == var9)
+                    if (var23 * 2 + 1 == prevfoodlevel)
                     {
                         this.drawTexturedModalRect(var27, var36, var25 + 63, 27, 9, 9);
                     }
                 }
 
-                if (var23 * 2 + 1 < var8)
+                if (var23 * 2 + 1 < foodlevel)
                 {
                     this.drawTexturedModalRect(var27, var36, var25 + 36, 27, 9, 9);
                 }
 
-                if (var23 * 2 + 1 == var8)
+                if (var23 * 2 + 1 == foodlevel)
                 {
                     this.drawTexturedModalRect(var27, var36, var25 + 45, 27, 9, 9);
                 }
             }
         }
-        else if (var34 instanceof EntityLivingBase)
+        else if (ridingentity instanceof EntityLivingBase)
         {
             this.mc.mcProfiler.endStartSection("mountHealth");
-            EntityLivingBase var35 = (EntityLivingBase)var34;
+            EntityLivingBase var35 = (EntityLivingBase)ridingentity;
             var36 = (int)Math.ceil((double)var35.getHealth());
             float var37 = var35.getMaxHealth();
             var26 = (int)(var37 + 0.5F) / 2;
@@ -830,7 +924,9 @@
     /**
      * Renders dragon's (boss) health on the HUD
      */
-    private void renderBossHealth()
+	/** MINECRIFT FORGE **/ 
+    protected void renderBossHealth()
+	/** END MINECRIFT FORGE **/
     {
         if (BossStatus.bossName != null && BossStatus.statusBarTime > 0)
         {
@@ -856,9 +952,15 @@
             this.mc.getTextureManager().bindTexture(icons);
         }
     }
-
-    private void renderPumpkinBlur(int p_73836_1_, int p_73836_2_)
+	/** MINECRIFT FORGE **/
+    protected void renderPumpkinBlur(int p_73836_1_, int p_73836_2_)
+	/** END MINECRIFT FORGE **/
     {
+        /** MINECRIFT **/
+        if (this.mc.stereoProvider.isStereo())
+            return;
+        /** END MINECRIFT **/
+
         GL11.glDisable(GL11.GL_DEPTH_TEST);
         GL11.glDepthMask(false);
         OpenGlHelper.glBlendFunc(770, 771, 1, 0);
@@ -881,8 +983,15 @@
     /**
      * Renders the vignette. Args: vignetteBrightness, width, height
      */
-    private void renderVignette(float p_73829_1_, int p_73829_2_, int p_73829_3_)
+	/** MINECRIFT FORGE **/ 
+    protected void renderVignette(float p_73829_1_, int p_73829_2_, int p_73829_3_)
+	/** END MINECRIFT FORGE **/
     {
+        /** MINECRIFT **/
+        if (this.mc.stereoProvider.isStereo())
+            return;
+        /** END MINECRIFT **/
+
         p_73829_1_ = 1.0F - p_73829_1_;
 
         if (p_73829_1_ < 0.0F)
@@ -913,44 +1022,22 @@
         GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
         OpenGlHelper.glBlendFunc(770, 771, 1, 0);
     }
-
-    private void func_130015_b(float p_130015_1_, int p_130015_2_, int p_130015_3_)
+    
+    //unused
+	/** MINECRIFT FORGE **/
+    protected void renderPortal(float p_130015_1_, int p_130015_2_, int p_130015_3_)
+	/** END MINECRIFT FORGE **/
     {
-        if (p_130015_1_ < 1.0F)
-        {
-            p_130015_1_ *= p_130015_1_;
-            p_130015_1_ *= p_130015_1_;
-            p_130015_1_ = p_130015_1_ * 0.8F + 0.2F;
-        }
-
-        GL11.glDisable(GL11.GL_ALPHA_TEST);
-        GL11.glDisable(GL11.GL_DEPTH_TEST);
-        GL11.glDepthMask(false);
-        OpenGlHelper.glBlendFunc(770, 771, 1, 0);
-        GL11.glColor4f(1.0F, 1.0F, 1.0F, p_130015_1_);
-        IIcon var4 = Blocks.portal.getBlockTextureFromSide(1);
-        this.mc.getTextureManager().bindTexture(TextureMap.locationBlocksTexture);
-        float var5 = var4.getMinU();
-        float var6 = var4.getMinV();
-        float var7 = var4.getMaxU();
-        float var8 = var4.getMaxV();
-        Tessellator var9 = Tessellator.instance;
-        var9.startDrawingQuads();
-        var9.addVertexWithUV(0.0D, (double)p_130015_3_, -90.0D, (double)var5, (double)var8);
-        var9.addVertexWithUV((double)p_130015_2_, (double)p_130015_3_, -90.0D, (double)var7, (double)var8);
-        var9.addVertexWithUV((double)p_130015_2_, 0.0D, -90.0D, (double)var7, (double)var6);
-        var9.addVertexWithUV(0.0D, 0.0D, -90.0D, (double)var5, (double)var6);
-        var9.draw();
-        GL11.glDepthMask(true);
-        GL11.glEnable(GL11.GL_DEPTH_TEST);
-        GL11.glEnable(GL11.GL_ALPHA_TEST);
-        GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
+    	//leave cause forge?
+    	mc.entityRenderer.itemRenderer.renderPortal(p_130015_1_, p_130015_2_, p_130015_3_);
     }
 
     /**
      * Renders the specified item of the inventory slot at the specified location. Args: slot, x, y, partialTick
      */
-    private void renderInventorySlot(int p_73832_1_, int p_73832_2_, int p_73832_3_, float p_73832_4_)
+	/** MINECRIFT FORGE **/ 
+    protected void renderInventorySlot(int p_73832_1_, int p_73832_2_, int p_73832_3_, float p_73832_4_)
+	/** END MINECRIFT FORGE **/
     {
         ItemStack var5 = this.mc.thePlayer.inventory.mainInventory[p_73832_1_];
 
@@ -1039,4 +1126,23 @@
     {
         return this.updateCounter;
     }
+
+    /** ALL MINECRIFT ADDITIONS BELOW **/
+	
+    /**
+     * Draws a centred textured rectangle at the stored z-value. Args: x, y, width, height, u, v, texwidth, texheight
+     */
+    public void drawCentredTexturedModalRect(int centreX, int centreY, float width, float height, int u, int v, int texWidth, int texHeight)
+    {   	
+        float f = 0.00390625F;
+        float f1 = 0.00390625F;
+        Tessellator tessellator = Tessellator.instance;
+        tessellator.startDrawingQuads();
+        tessellator.addVertexWithUV((double)(centreX - (width / 2f)), (double)(centreY + (height / 2f)), (double)this.zLevel, (double)((float)(u + 0) * f), (double)((float)(v + texHeight) * f1));
+        tessellator.addVertexWithUV((double)(centreX + (width / 2f)), (double)(centreY + (height / 2f)), (double)this.zLevel, (double)((float)(u + texWidth) * f), (double)((float)(v + texHeight) * f1));
+        tessellator.addVertexWithUV((double)(centreX + (width / 2f)), (double)(centreY - (height / 2f)), (double)this.zLevel, (double)((float)(u + texWidth) * f), (double)((float)(v + 0) * f1));
+        tessellator.addVertexWithUV((double)(centreX - (width / 2f)), (double)(centreY - (height / 2f)), (double)this.zLevel, (double)((float)(u + 0) * f), (double)((float)(v + 0) * f1));
+        tessellator.draw();
+    }
 }
+
