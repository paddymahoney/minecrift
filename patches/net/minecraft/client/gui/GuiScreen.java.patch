--- a/net/minecraft/client/gui/GuiScreen.java
+++ b/net/minecraft/client/gui/GuiScreen.java
@@ -9,11 +9,16 @@
 import java.util.Arrays;
 import java.util.Iterator;
 import java.util.List;
+
+import com.mtbs3d.minecrift.provider.MCOpenVR;
+import com.mtbs3d.minecrift.settings.VRSettings;
 import net.minecraft.client.Minecraft;
 import net.minecraft.client.renderer.RenderHelper;
 import net.minecraft.client.renderer.Tessellator;
 import net.minecraft.client.renderer.entity.RenderItem;
+import net.minecraft.item.Item;
 import net.minecraft.item.ItemStack;
+import net.minecraft.src.Reflector;
 import net.minecraft.util.EnumChatFormatting;
 import org.lwjgl.input.Keyboard;
 import org.lwjgl.input.Mouse;
@@ -44,13 +49,22 @@
     public boolean allowUserInput;
 
     /** The FontRenderer used by GuiScreen */
-    protected FontRenderer fontRendererObj;
+    public FontRenderer fontRendererObj;
 
     /** The button that was just pressed. */
     private GuiButton selectedButton;
     private int eventButton;
     private long lastMouseEvent;
 
+	/** MINECRIFT */
+	public static int mouseOffsetX = 0;
+	public static int mouseOffsetY = 0;
+	/** END MINECRIFT */
+	
+	public boolean pressShiftFake;
+
+	public int mouseX, mouseY;
+	
     /**
      * Incremented when the game is in touchscreen mode and the screen is tapped, decremented if the screen isn't
      * tapped. Does not appear to be used.
@@ -84,6 +98,10 @@
     {
         if (keyCode == 1)
         {
+            /** MINECRIFT */
+            // Escape pressed - save all
+            VRSettings.saveAll(this.mc);
+            /** END MINECRIFT */
             this.mc.displayGuiScreen((GuiScreen)null);
             this.mc.setIngameFocus();
         }
@@ -142,21 +160,37 @@
                 var4.set(var5, EnumChatFormatting.GRAY + (String)var4.get(var5));
             }
         }
-
-        this.drawHoveringText(var4, x, y);
+		/** MINECRIFT FORGE **/
+        if (Reflector.forgeExists())
+		{
+            Item item = itemIn.getItem();
+            FontRenderer font = (FontRenderer)Reflector.call(item, Reflector.MinecraftItem_Forge_getFontRenderer, new Object[] {itemIn});
+            drawHoveringText(var4, x, y, (font == null ? fontRendererObj : font));
+		}
+		else
+		{
+			this.drawHoveringText(var4, x, y);
+		}
+		/** END MINECRIFT FORGE **/
     }
 
     /**
      * Draws the text when mouse is over creative inventory tab. Params: current creative tab to be checked, current
      * mouse x position, current mouse y position.
      */
-    protected void drawCreativeTabHoveringText(String tabName, int mouseX, int mouseY)
-    {
+    protected void drawCreativeTabHoveringText(String tabName, int mouseX, int mouseY) {
         this.drawHoveringText(Arrays.asList(new String[] {tabName}), mouseX, mouseY);
     }
 
     protected void drawHoveringText(List textLines, int x, int y)
     {
+    /** MINECRIFT FORGE **/
+        drawHoveringText(textLines, x, y, fontRendererObj);
+    }
+
+    protected void drawHoveringText(List textLines, int x, int y, FontRenderer font)
+    {
+    /** END MINECRIFT FORGE **/
         if (!textLines.isEmpty())
         {
             GL11.glDisable(GL12.GL_RESCALE_NORMAL);
@@ -169,7 +203,9 @@
             while (var5.hasNext())
             {
                 String var6 = (String)var5.next();
-                int var7 = this.fontRendererObj.getStringWidth(var6);
+                /** MINECRIFT FORGE **/
+                int var7 = font.getStringWidth(var6);
+                /** END MINECRIFT FORGE **/
 
                 if (var7 > var4)
                 {
@@ -214,7 +250,9 @@
             for (int var12 = 0; var12 < textLines.size(); ++var12)
             {
                 String var13 = (String)textLines.get(var12);
-                this.fontRendererObj.drawStringWithShadow(var13, var14, var15, -1);
+                /** MINECRIFT FORGE **/
+                font.drawStringWithShadow(var13, var14, var15, -1);
+                /** END MINECRIFT FORGE **/
 
                 if (var12 == 0)
                 {
@@ -246,10 +284,26 @@
 
                 if (var5.mousePressed(this.mc, mouseX, mouseY))
                 {
-                    this.selectedButton = var5;
-                    var5.playPressSound(this.mc.getSoundHandler());
-                    this.actionPerformed(var5);
-                }
+					/** MINECRIFT FORGE **/
+					if (Reflector.forgeExists())
+					{
+                        Object event = Reflector.newInstance(Reflector.ForgeGuiScreenActionPerformedEvent_Pre_Constructor, new Object[] {this, var5, this.buttonList});
+	                    if (Reflector.postForgeBusEvent(event))
+	                        break;
+	                    this.selectedButton = (GuiButton)Reflector.getFieldValue(event, Reflector.ForgeGuiScreenActionPerformedEvent_button);
+                        this.selectedButton.playPressSound(this.mc.getSoundHandler());
+	                    this.actionPerformed(this.selectedButton);
+	                    if (this.equals(this.mc.currentScreen))
+                            Reflector.postForgeBusEvent(Reflector.ForgeActionPerformedEvent_Post_Constructor, new Object[] {this, this.selectedButton, this.buttonList});
+					}
+					else
+					{
+	                    this.selectedButton = var5;
+	                    var5.playPressSound(this.mc.getSoundHandler());
+	                    this.actionPerformed(var5);
+					}
+					/** END MINECRIFT FORGE **/
+				}
             }
         }
     }
@@ -285,8 +339,22 @@
         this.fontRendererObj = mc.fontRendererObj;
         this.width = width;
         this.height = height;
-        this.buttonList.clear();
-        this.initGui();
+		/** MINECRIFT FORGE **/
+		if (Reflector.forgeExists())
+		{
+            if (!Reflector.postForgeBusEvent(Reflector.ForgeInitGuiEvent_Pre_Constructor, new Object[] {this, this.buttonList}));
+            {
+                this.buttonList.clear();
+                this.initGui();
+            }
+            Reflector.postForgeBusEvent(Reflector.ForgeInitGuiEvent_Post_Constructor, new Object[] {this, this.buttonList});
+		}
+		else
+		{
+            this.buttonList.clear();
+            this.initGui();
+		}
+		/** END MINECRIFT FORGE **/
     }
 
     /**
@@ -302,7 +370,14 @@
         if (Mouse.isCreated())
         {
             while (Mouse.next())
-            {
+            {		
+            	
+            	if (mc.stereoProvider.isStereo()){
+            		if(!MCOpenVR.controllerMouseValid){
+            			MCOpenVR.controllerMouseValid = true;
+            			MCOpenVR.controllerMouseTicks = 20;
+				}}
+            	
                 this.handleMouseInput();
             }
         }
@@ -321,9 +396,23 @@
      */
     public void handleMouseInput()
     {
-        int var1 = Mouse.getEventX() * this.width / this.mc.displayWidth;
-        int var2 = this.height - Mouse.getEventY() * this.height / this.mc.displayHeight - 1;
+		/** MINECRIFT */
+
+    	if (mc.stereoProvider.isStereo()){
+    		if(!MCOpenVR.controllerMouseValid){
+				if (mc.mouseHelper.deltaX > 0 || mc.mouseHelper.deltaY> 0 )
+        			MCOpenVR.controllerMouseValid = true;
+				}
+			}
+    	
+        // Reset mouse offset
+        mouseOffsetX = -1;
+        mouseOffsetY = -1;
+
+        int var1 =mouseX = getMouseX();
+        int var2 = mouseY= getMouseY();
         int var3 = Mouse.getEventButton();
+		/** END MINECRIFT */
 
         if (Mouse.getEventButtonState())
         {
@@ -388,8 +477,17 @@
     {
         if (this.mc.theWorld != null)
         {
+        /** MINECRIFT */
+        if (this.mc.vrSettings != null && this.mc.vrSettings.menuBackground == false)
+        {
+            this.drawGradientRect(0, 0, this.width, this.height, 0, 0);
+        }
+        else
+        {
             this.drawGradientRect(0, 0, this.width, this.height, -1072689136, -804253680);
         }
+		/** END MINECRIFT */
+        }
         else
         {
             this.drawBackground(tint);
@@ -441,4 +539,82 @@
     {
         return Keyboard.isKeyDown(42) || Keyboard.isKeyDown(54);
     }
+	
+    /** MINECRIFT ADDITIONS BELOW */
+	public static boolean mouseDown;
+    public void mouseDown( int rawX, int rawY, int button )
+    {
+        int var1 = rawX * this.width / this.mc.displayWidth;
+        int var2 = this.height - rawY * this.height / this.mc.displayHeight - 1;
+        this.eventButton = button;
+        this.lastMouseEvent = Minecraft.getSystemTime();
+        mouseClicked(var1, var2, button);
+    	mouseDown = true;
+    }
+    
+    public void mouseUp( int rawX, int rawY, int button )
+    {
+    	mouseDown = false;
+        int var1 = rawX * this.width / this.mc.displayWidth;
+        int var2 = this.height - rawY * this.height / this.mc.displayHeight - 1;
+        mouseReleased(var1, var2, button);
+    }
+    
+    public void mouseDrag( int rawX, int rawY )
+    {
+        int var1 = rawX * this.width / this.mc.displayWidth;
+        int var2 = this.height - rawY * this.height / this.mc.displayHeight - 1;
+        long var3 = Minecraft.getSystemTime() - this.lastMouseEvent;
+        this.mouseClickMove(var1, var2, this.eventButton, var3);
+    }
+
+    public void mouseGuiDown( int guiX, int guiY, int button )
+    {
+        this.eventButton = button;
+        this.lastMouseEvent = Minecraft.getSystemTime();
+        mouseClicked(guiX, guiY, button);
+    }
+    
+    public void mouseGuiUp( int guiX, int guiY, int button )
+    {
+    	mouseDown = false;
+        mouseReleased(guiX, guiY, button);
+    }
+    
+    public void mouseGuiDrag( int guiX, int guiY )
+    {
+        long var3 = Minecraft.getSystemTime() - this.lastMouseEvent;
+        this.mouseClickMove(guiX, guiY, this.eventButton, var3);
+    }
+
+    public int getMouseX()
+    {
+        int mX = Mouse.getX() * this.mc.currentScreen.width / this.mc.displayWidth;
+        mX += (this.mouseOffsetX == -1 ? 0 : this.mouseOffsetX);
+        return mX;
+    }
+
+    public int getMouseY()
+    {
+        int mY = this.mc.currentScreen.height - Mouse.getY() * this.mc.currentScreen.height / this.mc.displayHeight - 1;
+        mY += (this.mouseOffsetY == -1 ? 0 : this.mouseOffsetY);
+        return mY;
+    }
+
+    public int getActualMouseX()
+    {
+        int mX = Mouse.getX() * this.mc.currentScreen.width / this.mc.displayHeight;
+        return mX;
+    }
+
+    public int getActualMouseY()
+    {
+        int mY = this.mc.currentScreen.height - Mouse.getY() * this.mc.currentScreen.height / this.mc.displayHeight - 1;
+        return mY;
+    }
+
+    public List getButtonList()
+    {
+        return this.buttonList;
+    }
 }
