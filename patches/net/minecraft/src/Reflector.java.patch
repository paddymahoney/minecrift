--- a/net/minecraft/src/Reflector.java
+++ b/net/minecraft/src/Reflector.java
@@ -4,25 +4,53 @@
 import java.lang.reflect.Field;
 import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Method;
+import java.util.List;
 import java.util.ArrayList;
+
 import net.minecraft.block.Block;
+import net.minecraft.client.Minecraft;
+import net.minecraft.client.gui.FontRenderer;
+import net.minecraft.client.gui.GuiButton;
 import net.minecraft.client.gui.GuiScreen;
+import net.minecraft.client.gui.GuiTextField;
 import net.minecraft.client.renderer.EntityRenderer;
+import net.minecraft.client.renderer.ItemRenderer;
+import net.minecraft.client.renderer.RenderGlobal;
+import net.minecraft.client.renderer.culling.Frustrum;
+import net.minecraft.client.renderer.entity.RenderBiped;
+import net.minecraft.client.renderer.entity.RenderPlayer;
+import net.minecraft.client.renderer.texture.TextureMap;
+import net.minecraft.client.settings.GameSettings;
+import net.minecraft.creativetab.CreativeTabs;
 import net.minecraft.entity.Entity;
 import net.minecraft.entity.EntityLivingBase;
 import net.minecraft.entity.EnumCreatureType;
+import net.minecraft.entity.item.EntityMinecart;
+import net.minecraft.entity.player.EntityPlayer;
 import net.minecraft.entity.player.EntityPlayerMP;
 import net.minecraft.item.Item;
 import net.minecraft.item.ItemRecord;
 import net.minecraft.item.ItemStack;
 import net.minecraft.potion.PotionEffect;
+import net.minecraft.server.MinecraftServer;
 import net.minecraft.tileentity.TileEntity;
+import net.minecraft.util.DamageSource;
+import net.minecraft.util.Vec3;
 import net.minecraft.world.ChunkCoordIntPair;
 import net.minecraft.world.World;
 import net.minecraft.world.WorldProvider;
+import org.lwjgl.input.Controllers;
+import net.minecraft.network.play.server.S35PacketUpdateTileEntity;
+import net.minecraft.network.NetworkManager;
+import net.minecraft.entity.item.EntityItem;
+import java.util.Random;
+import net.minecraft.client.renderer.texture.TextureManager;
+import net.minecraft.client.renderer.RenderBlocks;
 
 public class Reflector
 {
+	public final static boolean DEBUG = false; 
+	
     public static ReflectorClass ModLoader = new ReflectorClass("ModLoader");
     public static ReflectorMethod ModLoader_renderWorldBlock = new ReflectorMethod(ModLoader, "renderWorldBlock");
     public static ReflectorMethod ModLoader_renderInvBlock = new ReflectorMethod(ModLoader, "renderInvBlock");
@@ -75,8 +103,12 @@
     public static ReflectorMethod FMLClientHandler_isLoading = new ReflectorMethod(FMLClientHandler, "isLoading");
     public static ReflectorMethod FMLClientHandler_trackBrokenTexture = new ReflectorMethod(FMLClientHandler, "trackBrokenTexture");
     public static ReflectorMethod FMLClientHandler_trackMissingTexture = new ReflectorMethod(FMLClientHandler, "trackMissingTexture");
+    public static ReflectorClass IItemRenderer= new ReflectorClass("net.minecraftforge.client.IItemRenderer");
+    public static ReflectorMethod IItemRenderer_renderItem = new ReflectorMethod(IItemRenderer, "renderItem");
     public static ReflectorClass ItemRenderType = new ReflectorClass("net.minecraftforge.client.IItemRenderer$ItemRenderType");
     public static ReflectorField ItemRenderType_EQUIPPED = new ReflectorField(ItemRenderType, "EQUIPPED");
+    public static ReflectorField ItemRenderType_ENTITY = new ReflectorField(ItemRenderType, "ENTITY");
+    public static ReflectorField ItemRenderType_EQUIPPED_FIRST_PERSON= new ReflectorField(ItemRenderType, "EQUIPPED_FIRST_PERSON");
     public static ReflectorClass ForgeWorldProvider = new ReflectorClass(WorldProvider.class);
     public static ReflectorMethod ForgeWorldProvider_getSkyRenderer = new ReflectorMethod(ForgeWorldProvider, "getSkyRenderer");
     public static ReflectorMethod ForgeWorldProvider_getCloudRenderer = new ReflectorMethod(ForgeWorldProvider, "getCloudRenderer");
@@ -136,12 +168,295 @@
     public static ReflectorMethod ForgeItemStack_hasEffect = new ReflectorMethod(ForgeItemStack, "hasEffect", new Class[] {Integer.TYPE});
     public static ReflectorClass ForgeItemRecord = new ReflectorClass(ItemRecord.class);
     public static ReflectorMethod ForgeItemRecord_getRecordResource = new ReflectorMethod(ForgeItemRecord, "getRecordResource", new Class[] {String.class});
+    public static ReflectorClass ForgeTextureMap = new ReflectorClass(TextureMap.class);
+    public static ReflectorConstructor ForgeTextureMap_Constructor = new ReflectorConstructor(ForgeTextureMap, new Class[] {Integer.TYPE, String.class, Boolean.TYPE});
     public static ReflectorClass Launch = new ReflectorClass("net.minecraft.launchwrapper.Launch");
     public static ReflectorField Launch_blackboard = new ReflectorField(Launch, "blackboard");
     public static ReflectorClass SplashScreen = new ReflectorClass("net.minecraftforge.fml.client.SplashProgress");
 
+    /** MINECRIFT */
+    public static ReflectorClass ForgeIntegratedServer = new ReflectorClass("net.minecraftforge.client.integrated.IntegratedServer");
+    public static ReflectorMethod ForgeIntegratedServer_isServerStopped = new ReflectorMethod(ForgeIntegratedServer, "isServerStopped");
+    public static ReflectorClass ForgeGuiIngame = new ReflectorClass("net.minecraftforge.client.GuiIngameForge");
+    public static ReflectorConstructor ForgeGuiIngame_Constructor = new ReflectorConstructor(ForgeGuiIngame, new Class[]{Minecraft.class});
+    public static ReflectorField ForgeGuiIngame_renderCrosshairs = new ReflectorField(ForgeGuiIngame, "renderCrosshairs");
+    public static ReflectorField ForgeGuiIngame_renderHelmet = new ReflectorField(ForgeGuiIngame, "renderHelmet");
+    public static ReflectorMethod FMLClientHandler_beginMinecraftLoading = new ReflectorMethod(FMLClientHandler, "beginMinecraftLoading"); //
+    public static ReflectorMethod FMLClientHandler_finishMinecraftLoading = new ReflectorMethod(FMLClientHandler, "finishMinecraftLoading");
+    public static ReflectorMethod FMLClientHandler_connectToServerAtStartup = new ReflectorMethod(FMLClientHandler, "connectToServerAtStartup");
+    public static ReflectorMethod FMLClientHandler_onInitializationComplete = new ReflectorMethod(FMLClientHandler, "onInitializationComplete");
+    public static ReflectorMethod FMLClientHandler_startIntegratedServer = new ReflectorMethod(FMLClientHandler, "startIntegratedServer");
+    public static ReflectorMethod FMLClientHandler_handleClientWorldClosing = new ReflectorMethod(FMLClientHandler, "handleClientWorldClosing");
+    public static ReflectorMethod FMLClientHandler_handleLoadingScreen = new ReflectorMethod(FMLClientHandler, "handleLoadingScreen");
+    public static ReflectorMethod FMLCommonHandler_handleExit = new ReflectorMethod(FMLCommonHandler, "handleExit");
+    public static ReflectorMethod FMLCommonHandler_onRenderTickStart = new ReflectorMethod(FMLCommonHandler, "onRenderTickStart");
+    public static ReflectorMethod FMLCommonHandler_onRenderTickEnd = new ReflectorMethod(FMLCommonHandler, "onRenderTickEnd");
+    public static ReflectorMethod FMLCommonHandler_onPreClientTick = new ReflectorMethod(FMLCommonHandler, "onPreClientTick");
+    public static ReflectorMethod FMLCommonHandler_onPostClientTick = new ReflectorMethod(FMLCommonHandler, "onPostClientTick");
+    public static ReflectorMethod FMLCommonHandler_fireMouseInput = new ReflectorMethod(FMLCommonHandler, "fireMouseInput");
+    public static ReflectorMethod FMLCommonHandler_fireKeyInput = new ReflectorMethod(FMLCommonHandler, "fireKeyInput");
+    public static ReflectorMethod FMLCommonHandler_getBrandings = new ReflectorMethod(FMLCommonHandler, "getBrandings");
+    public static ReflectorMethod FMLCommonHandler_onPlayerPreTick = new ReflectorMethod(FMLCommonHandler, "onPlayerPreTick");
+    public static ReflectorMethod FMLCommonHandler_onPlayerPostTick = new ReflectorMethod(FMLCommonHandler, "onPlayerPostTick");
+    public static ReflectorClass FMLLog = new ReflectorClass("cpw.mods.fml.common.FMLLog");
+    public static ReflectorMethod FMLLog_info = new ReflectorMethod(FMLLog, "info");
+    public static ReflectorMethod FMLLog_warning = new ReflectorMethod(FMLLog, "warning");
+    public static ReflectorMethod FMLLog_severe = new ReflectorMethod(FMLLog, "severe");
+    public static ReflectorClass FMLGuiModList = new ReflectorClass("cpw.mods.fml.client.GuiModList");
+    public static ReflectorConstructor FMLGuiModList_Constructor = new ReflectorConstructor(FMLGuiModList, new Class[]{GuiScreen.class});
+    public static ReflectorClass FMLStartupQuery = new ReflectorClass("cpw.mods.fml.common.StartupQuery");
+    public static ReflectorMethod FMLStartupQuery_check = new ReflectorMethod(FMLStartupQuery, "check");
+    public static ReflectorClass ForgeGuiScreenActionPerformedEvent_Pre = new ReflectorClass("net.minecraftforge.client.event.GuiScreenEvent$ActionPerformedEvent$Pre");
+    public static ReflectorClass ForgeGuiScreenActionPerformedEvent = new ReflectorClass("net.minecraftforge.client.event.GuiScreenEvent$ActionPerformedEvent");
+    public static ReflectorConstructor ForgeGuiScreenActionPerformedEvent_Pre_Constructor = new ReflectorConstructor(ForgeGuiScreenActionPerformedEvent_Pre, new Class[] {GuiScreen.class, GuiButton.class, List.class});
+    public static ReflectorField ForgeGuiScreenActionPerformedEvent_button = new ReflectorField(ForgeGuiScreenActionPerformedEvent, "button");
+    public static ReflectorClass ForgeActionPerformedEvent_Post = new ReflectorClass("net.minecraftforge.client.event.GuiScreenEvent$ActionPerformedEvent$Post");
+    public static ReflectorConstructor ForgeActionPerformedEvent_Post_Constructor = new ReflectorConstructor(ForgeActionPerformedEvent_Post, new Class[] {GuiScreen.class, GuiButton.class, List.class});
+    public static ReflectorMethod ForgeHooks_onPickBlock = new ReflectorMethod(ForgeHooks, "onPickBlock");
+    public static ReflectorMethod ForgeHooks_canInteractWith = new ReflectorMethod(ForgeHooks, "canInteractWith");
+    public static ReflectorMethod ForgeHooks_onPlayerTossEvent = new ReflectorMethod(ForgeHooks, "onPlayerTossEvent");
+    public static ReflectorMethod ForgeHooks_canToolHarvestBlock = new ReflectorMethod(ForgeHooks, "canToolHarvestBlock");
+    public static ReflectorMethod ForgeHooksClient_postMouseEvent = new ReflectorMethod(ForgeHooksClient, "postMouseEvent");
+    public static ReflectorMethod ForgeHooksClient_createDisplay = new ReflectorMethod(ForgeHooksClient, "createDisplay");
+    public static ReflectorMethod ForgeHooksClient_getArmorModel = new ReflectorMethod(ForgeHooksClient, "getArmorModel");
+    public static ReflectorMethod ForgeHooksClient_getOffsetFov = new ReflectorMethod(ForgeHooksClient, "getOffsetFOV");
+    public static ReflectorMethod ForgeHooksClient_renderMainMenu = new ReflectorMethod(ForgeHooksClient, "renderMainMenu"); //
+    public static ReflectorMethod ForgeEventFactory_onPlayerInteract = null;
+    public static ReflectorMethod ForgeEventFactory_onUseItemStop = new ReflectorMethod(ForgeEventFactory, "onUseItemStop"); //
+    public static ReflectorMethod ForgeEventFactory_onItemUseTick = new ReflectorMethod(ForgeEventFactory, "onItemUseTick"); //
+    public static ReflectorMethod ForgeEventFactory_onItemUseFinish = new ReflectorMethod(ForgeEventFactory, "onItemUseFinish"); //
+    public static ReflectorMethod ForgeEventFactory_onItemUseStart = new ReflectorMethod(ForgeEventFactory, "onItemUseStart"); //
+    public static ReflectorMethod ForgeEventFactory_getBreakSpeed = new ReflectorMethod(ForgeEventFactory, "getBreakSpeed", new Class[] {EntityPlayer.class, Block.class, Integer.TYPE, Float.TYPE, Integer.TYPE, Integer.TYPE, Integer.TYPE});
+    public static ReflectorMethod ForgeEventFactory_doPlayerHarvestCheck = new ReflectorMethod(ForgeEventFactory, "doPlayerHarvestCheck"); //
+    public static ReflectorMethod ForgeEventFactory_getPlayerDisplayName = new ReflectorMethod(ForgeEventFactory, "getPlayerDisplayName"); //
+    public static ReflectorMethod ForgeEventFactory_onLivingHeal = new ReflectorMethod(ForgeEventFactory, "onLivingHeal"); //
+    public static ReflectorClass ForgeInitGuiEvent_Pre = new ReflectorClass("net.minecraftforge.client.event.GuiScreenEvent$InitGuiEvent$Pre");
+    public static ReflectorConstructor ForgeInitGuiEvent_Pre_Constructor = new ReflectorConstructor(ForgeInitGuiEvent_Pre, new Class[] {GuiScreen.class, List.class});
+    public static ReflectorClass ForgeInitGuiEvent_Post = new ReflectorClass("net.minecraftforge.client.event.GuiScreenEvent$InitGuiEvent$Post");
+    public static ReflectorConstructor ForgeInitGuiEvent_Post_Constructor = new ReflectorConstructor(ForgeInitGuiEvent_Post, new Class[] {GuiScreen.class, List.class});
+    public static ReflectorClass ForgeGuiOpenEvent = new ReflectorClass("net.minecraftforge.client.event.GuiOpenEvent");
+    public static ReflectorConstructor ForgeGuiOpenEvent_Constructor = new ReflectorConstructor(ForgeGuiOpenEvent, new Class[] {GuiScreen.class});
+    public static ReflectorField ForgeGuiOpenEvent_gui = new ReflectorField(ForgeGuiOpenEvent, "gui");
+    public static ReflectorClass ForgeRenderPlayerEvent_Pre = new ReflectorClass("net.minecraftforge.client.event.RenderPlayerEvent$Pre");
+    public static ReflectorConstructor ForgeRenderPlayerEvent_Pre_Constructor = new ReflectorConstructor(ForgeRenderPlayerEvent_Pre, new Class[] {EntityPlayer.class, RenderPlayer.class, Float.TYPE});
+    public static ReflectorClass ForgeRenderPlayerEvent_Post = new ReflectorClass("net.minecraftforge.client.event.RenderPlayerEvent$Post");
+    public static ReflectorConstructor ForgeRenderPlayerEvent_Post_Constructor = new ReflectorConstructor(ForgeRenderPlayerEvent_Post, new Class[] {EntityPlayer.class, RenderPlayer.class, Float.TYPE});
+    public static ReflectorClass ForgeRenderPlayerEvent_Specials_Pre = new ReflectorClass("net.minecraftforge.client.event.RenderPlayerEvent$Specials$Pre");
+    public static ReflectorConstructor ForgeRenderPlayerEvent_Specials_Pre_Constructor = new ReflectorConstructor(ForgeRenderPlayerEvent_Specials_Pre, new Class[] {EntityPlayer.class, RenderPlayer.class, Float.TYPE});
+    public static ReflectorField ForgeRenderPlayerEvent_Specials_Pre_renderCape = new ReflectorField(ForgeRenderPlayerEvent_Specials_Pre, "renderCape");
+    public static ReflectorField ForgeRenderPlayerEvent_Specials_Pre_renderItem = new ReflectorField(ForgeRenderPlayerEvent_Specials_Pre, "renderItem");
+    public static ReflectorField ForgeRenderPlayerEvent_Specials_Pre_renderHelmet = new ReflectorField(ForgeRenderPlayerEvent_Specials_Pre, "renderHelmet");
+    public static ReflectorClass ForgeRenderPlayerEvent_Specials_Post = new ReflectorClass("net.minecraftforge.client.event.RenderPlayerEvent$Specials$Post");
+    public static ReflectorConstructor ForgeRenderPlayerEvent_Specials_Post_Constructor = new ReflectorConstructor(ForgeRenderPlayerEvent_Specials_Post, new Class[] {EntityPlayer.class, RenderPlayer.class, Float.TYPE});
+    public static ReflectorClass ForgeRenderPlayerEvent_SetArmorModel = new ReflectorClass("net.minecraftforge.client.event.RenderPlayerEvent$SetArmorModel");
+    public static ReflectorConstructor ForgeRenderPlayerEvent_SetArmorModel_Constructor = new ReflectorConstructor(ForgeRenderPlayerEvent_SetArmorModel, new Class[] {EntityPlayer.class, RenderPlayer.class, Integer.TYPE, Float.TYPE, ItemStack.class});
+    public static ReflectorField ForgeRenderPlayerEvent_SetArmorModel_result = new ReflectorField(ForgeRenderPlayerEvent_SetArmorModel, "result");
+    public static ReflectorClass ForgeIItemRenderer = new ReflectorClass("net.minecraftforge.client.IItemRenderer");
+    public static ReflectorMethod ForgeIItemRenderer_shouldUseRenderHelper = new ReflectorMethod(ForgeIItemRenderer, "shouldUseRenderHelper");
+    public static ReflectorClass ForgeItemRendererHelper = new ReflectorClass("net.minecraftforge.client.IItemRenderer$ItemRendererHelper");
+    public static ReflectorField ForgeItemRendererHelper_BLOCK_3D = new ReflectorField(ForgeItemRendererHelper, "BLOCK_3D");
+    public static ReflectorClass ForgeEvent = new ReflectorClass("cpw.mods.fml.common.eventhandler.Event");
+    public static ReflectorMethod ForgeEvent_isCanceled = new ReflectorMethod(ForgeEvent, "isCanceled");
+    public static ReflectorClass ForgePlayerInteractEvent_Action = new ReflectorClass("net.minecraftforge.event.entity.player.PlayerInteractEvent$Action");
+    public static ReflectorField ForgePlayerInteractEvent_Action_RIGHT_CLICK_BLOCK = new ReflectorField(ForgePlayerInteractEvent_Action, "RIGHT_CLICK_BLOCK");
+    public static ReflectorField ForgePlayerInteractEvent_Action_RIGHT_CLICK_AIR = new ReflectorField(ForgePlayerInteractEvent_Action, "RIGHT_CLICK_AIR");
+    public static ReflectorClass ForgeWorldEvent_Unload = new ReflectorClass("net.minecraftforge.event.world.WorldEvent$Unload");
+    public static ReflectorConstructor ForgeWorldEvent_Unload_Constructor = new ReflectorConstructor(ForgeWorldEvent_Unload, new Class[]{World.class});
+    public static ReflectorMethod MinecraftForgeClient_getStencilBits = new ReflectorMethod(MinecraftForgeClient, "getStencilBits");
+    public static ReflectorClass MinecraftItem = new ReflectorClass(Item.class);
+    public static ReflectorMethod MinecraftItem_Forge_getFontRenderer = new ReflectorMethod(MinecraftItem, "getFontRenderer");
+    public static ReflectorMethod MinecraftItem_Forge_getRenderPasses = new ReflectorMethod(MinecraftItem, "getRenderPasses");
+    public static ReflectorClass ForgeRenderBiped = new ReflectorClass(RenderBiped.class);
+    public static ReflectorMethod ForgeRenderBiped_getArmorResource = new ReflectorMethod(ForgeRenderBiped, "getArmorResource");
+    public static ReflectorClass ForgePlaySoundAtEntityEvent = new ReflectorClass("net.minecraftforge.event.entity.PlaySoundAtEntityEvent");
+    public static ReflectorConstructor ForgePlaySoundAtEntityEvent_Constructor = new ReflectorConstructor(ForgePlaySoundAtEntityEvent, new Class[]{Entity.class, String.class, Float.TYPE, Float.TYPE});
+    public static ReflectorField ForgePlaySoundAtEntityEvent_name = new ReflectorField(ForgePlaySoundAtEntityEvent, "name");
+    public static ReflectorClass ForgeAchievementPage = new ReflectorClass("net.minecraftforge.common.AchievementPage");
+    public static ReflectorMethod ForgeAchievementPage_isAchievementInPages = new ReflectorMethod(ForgeAchievementPage, "isAchievementInPages");
+    public static ReflectorMethod ForgeAchievementPage_getAchievementPages = new ReflectorMethod(ForgeAchievementPage, "getAchievementPages");
+    public static ReflectorMethod ForgeAchievementPage_getAchievementPage = new ReflectorMethod(ForgeAchievementPage, "getAchievementPage", new Class[] {Integer.TYPE});
+    public static ReflectorMethod ForgeAchievementPage_getAchievements = new ReflectorMethod(ForgeAchievementPage, "getAchievements");
+    public static ReflectorMethod ForgeAchievementPage_getTitle = new ReflectorMethod(ForgeAchievementPage, "getTitle");
+    public static ReflectorClass MinecraftCreativeTabs = new ReflectorClass(CreativeTabs.class);
+    public static ReflectorMethod MinecraftCreativeTabs_hasSearchBar = new ReflectorMethod(MinecraftCreativeTabs, "hasSearchBar");
+    //public static ReflectorMethod MinecraftCreativeTabs_getSearchBarWidth = new ReflectorMethod(MinecraftCreativeTabs, "getSearchBarWidth");
+    public static ReflectorMethod MinecraftCreativeTabs_getTabPage = new ReflectorMethod(MinecraftCreativeTabs, "getTabPage");
+    public static ReflectorClass MinecraftGuiTextField = new ReflectorClass(GuiTextField.class);
+    public static ReflectorField MinecraftGuiTextField_width = new ReflectorField(MinecraftGuiTextField, /*"width"*/"field_146218_h");
+    public static ReflectorField MinecraftGuiTextField_xPosition = new ReflectorField(MinecraftGuiTextField, /*"xPosition"*/"field_146209_f");
+    public static ReflectorClass Minecraft_Server = new ReflectorClass(MinecraftServer.class);
+    //public static ReflectorField MinecraftServer_timeOfLastDimensionTick = new ReflectorField(Minecraft_Server, /*"timeOfLastDimensionTick"*/"field_71312_k");
+    public static ReflectorClass ForgePlayerDropsEvent = new ReflectorClass("net.minecraftforge.event.entity.player.PlayerDropsEvent");
+    public static ReflectorConstructor ForgePlayerDropsEvent_Constructor = new ReflectorConstructor(ForgePlayerDropsEvent, new Class[] {EntityPlayer.class, DamageSource.class, ArrayList.class, Boolean.TYPE});
+    public static ReflectorClass ForgeArmorProperties = new ReflectorClass("net.minecraftforge.common.ISpecialArmor$ArmorProperties");
+    public static ReflectorMethod ForgeArmorProperties_ApplyArmor = new ReflectorMethod(ForgeArmorProperties, "ApplyArmor");
+    public static ReflectorClass ForgeEntityInteractEvent = new ReflectorClass("net.minecraftforge.event.entity.player.EntityInteractEvent");
+    public static ReflectorConstructor ForgeEntityInteractEvent_Constructor = new ReflectorConstructor(ForgeEntityInteractEvent, new Class[] {EntityPlayer.class, Entity.class});
+    public static ReflectorClass ForgePlayerDestroyItemEvent = new ReflectorClass("net.minecraftforge.event.entity.player.PlayerDestroyItemEvent");
+    public static ReflectorConstructor ForgePlayerDestroyItemEvent_Constructor = new ReflectorConstructor(ForgePlayerDestroyItemEvent, new Class[] {EntityPlayer.class, ItemStack.class});
+    public static ReflectorClass ForgeAttackEntityEvent = new ReflectorClass("net.minecraftforge.event.entity.player.AttackEntityEvent");
+    public static ReflectorConstructor ForgeAttackEntityEvent_Constructor = new ReflectorConstructor(ForgeAttackEntityEvent, new Class[] {EntityPlayer.class, Entity.class});
+    public static ReflectorClass ForgePlayerSleepInBedEvent = new ReflectorClass("net.minecraftforge.event.entity.player.PlayerSleepInBedEvent");
+    public static ReflectorConstructor ForgePlayerSleepInBedEvent_Constructor = new ReflectorConstructor(ForgePlayerSleepInBedEvent, new Class[] {EntityPlayer.class, Integer.TYPE, Integer.TYPE, Integer.TYPE});
+    public static ReflectorField ForgePlayerSleepInBedEvent_result = new ReflectorField(ForgePlayerSleepInBedEvent, "result");
+    public static ReflectorClass ForgePlayerWakeUpEvent = new ReflectorClass("net.minecraftforge.event.entity.player.PlayerWakeUpEvent");
+    public static ReflectorConstructor ForgePlayerWakeUpEvent_Constructor = new ReflectorConstructor(ForgePlayerWakeUpEvent, new Class[] {EntityPlayer.class, Boolean.TYPE, Boolean.TYPE, Boolean.TYPE});
+    public static ReflectorClass ForgePlayerFlyableFallEvent = new ReflectorClass("net.minecraftforge.event.entity.player.PlayerFlyableFallEvent");
+    public static ReflectorConstructor ForgePlayerFlyableFallEvent_Constructor = new ReflectorConstructor(ForgePlayerFlyableFallEvent, new Class[] {EntityPlayer.class, Float.TYPE});
+    public static ReflectorClass ForgePlayerEvent_Clone = new ReflectorClass("net.minecraftforge.event.entity.player.PlayerEvent$Clone");
+    public static ReflectorConstructor ForgePlayerEvent_Clone_Constructor = new ReflectorConstructor(ForgePlayerEvent_Clone, new Class[] {EntityPlayer.class, EntityPlayer.class, Boolean.TYPE});
+    public static ReflectorClass FMLNetworkHandler = new ReflectorClass("cpw.mods.fml.common.network.internal.FMLNetworkHandler");
+    public static ReflectorMethod FMLNetworkHandler_openGui = new ReflectorMethod(FMLNetworkHandler, "openGui");
+    public static ReflectorClass ForgeEntityEvent_EntityConstructing = new ReflectorClass("net.minecraftforge.event.entity.EntityEvent$EntityConstructing");
+    public static ReflectorConstructor ForgeEntityEvent_EntityConstructing_Constructor = new ReflectorConstructor(ForgeEntityEvent_EntityConstructing, new Class[] {Entity.class});
+    public static ReflectorClass ForgeIExtendedEntityProperties = new ReflectorClass("net.minecraftforge.common.IExtendedEntityProperties");
+    public static ReflectorMethod ForgeIExtendedEntityProperties_init = new ReflectorMethod(ForgeIExtendedEntityProperties, "init");
+    public static ReflectorMethod ForgeIExtendedEntityProperties_saveNBTData = new ReflectorMethod(ForgeIExtendedEntityProperties, "saveNBTData");
+    public static ReflectorMethod ForgeIExtendedEntityProperties_loadNBTData = new ReflectorMethod(ForgeIExtendedEntityProperties, "loadNBTData");
+    public static ReflectorClass ForgeIFluidBlock = new ReflectorClass("net.minecraftforge.fluids.IFluidBlock");
+    public static ReflectorMethod ForgeIFluidBlock_getFilledPercentage = new ReflectorMethod(ForgeIFluidBlock, "getFilledPercentage");
+    public static ReflectorMethod ForgeBlock_getExplosionResistance = new ReflectorMethod(ForgeBlock, "getExplosionResistance");
+    public static ReflectorClass ForgeEntityMinecart = new ReflectorClass(EntityMinecart.class);
+    public static ReflectorMethod ForgeEntityMinecart_getCartItem = new ReflectorMethod(ForgeEntityMinecart, "getCartItem");
+    public static ReflectorMethod ForgeItem_onUsingTick = new ReflectorMethod(ForgeItem, "onUsingTick");
+    public static ReflectorMethod ForgeItem_onDroppedByPlayer = new ReflectorMethod(ForgeItem, "onDroppedByPlayer");
+    public static ReflectorMethod ForgeItem_getDigSpeed = new ReflectorMethod(ForgeItem, "getDigSpeed");
+    public static ReflectorMethod ForgeItem_onLeftClickEntity = new ReflectorMethod(ForgeItem, "onLeftClickEntity");
+    public static ReflectorMethod ForgeItem_getIcon = new ReflectorMethod(ForgeItem, "getIcon", new Class[] {ItemStack.class, Integer.TYPE, EntityPlayer.class, ItemStack.class, Integer.TYPE});
+    public static ReflectorClass ForgeEntityLivingBase = new ReflectorClass(EntityLivingBase.class);
+    public static ReflectorMethod ForgeEntityLivingBase_shouldRiderFaceForward = new ReflectorMethod(ForgeEntityLivingBase, "shouldRiderFaceForward");
+    public static ReflectorMethod ForgeBlock_isBed = new ReflectorMethod(ForgeBlock, "isBed");
+    public static ReflectorMethod ForgeBlock_setBedOccupied = new ReflectorMethod(ForgeBlock, "setBedOccupied");
+    public static ReflectorMethod ForgeBlock_getBedSpawnPosition = new ReflectorMethod(ForgeBlock, "getBedSpawnPosition");
+    public static ReflectorMethod ForgeHooks_isLivingOnLadder = new ReflectorMethod(ForgeHooks, "isLivingOnLadder");
+    public static ReflectorClass ForgeGuiScreen = new ReflectorClass(GuiScreen.class);
+    public static ReflectorClass FMLClientSplashProgress = new ReflectorClass("cpw.mods.fml.client.SplashProgress");
+    public static ReflectorMethod FMLClientSplashProgress_drawVanillaScreen = new ReflectorMethod(FMLClientSplashProgress, "drawVanillaScreen");
+    public static ReflectorMethod FMLClientSplashProgress_clearVanillaResources = new ReflectorMethod(FMLClientSplashProgress, "clearVanillaResources");
+    public static ReflectorClass FMLCommonProgressManager = new ReflectorClass("cpw.mods.fml.common.ProgressManager");
+    public static ReflectorMethod FMLCommonProgressManager_push = new ReflectorMethod(FMLCommonProgressManager, "push");
+    public static ReflectorMethod FMLCommonProgressManager_pop = new ReflectorMethod(FMLCommonProgressManager, "pop");
+    public static ReflectorClass FMLCommonProgressManager_ProgressBar = new ReflectorClass("cpw.mods.fml.common.ProgressManager$ProgressBar");
+    public static ReflectorMethod FMLCommonProgressManager_ProgressBar_step = new ReflectorMethod(FMLCommonProgressManager_ProgressBar, "step", new Class[] {String.class});
+    public static ReflectorClass Block = new ReflectorClass("net.minecraft.block.Block");
+    public static ReflectorMethod Block_removedByPlayer = new ReflectorMethod(Block, "removedByPlayer", new Class[] {World.class, EntityPlayer.class, Integer.TYPE, Integer.TYPE, Integer.TYPE});
+    public static ReflectorMethod ForgeTileEntity_onDataPacket = new ReflectorMethod(ForgeTileEntity, "onDataPacket", new Class[] {NetworkManager.class, S35PacketUpdateTileEntity.class});
+    public static ReflectorMethod ForgeHooksClient_renderEntityItem = new ReflectorMethod(ForgeHooksClient, "renderEntityItem", new Class[] {EntityItem.class, ItemStack.class, Float.TYPE, Float.TYPE, Random.class, TextureManager.class, RenderBlocks.class, Integer.TYPE});
+    public static ReflectorMethod ForgeHooksClient_renderInventoryItem = new ReflectorMethod(ForgeHooksClient, "renderInventoryItem", new Class[] {RenderBlocks.class, TextureManager.class, ItemStack.class, Boolean.TYPE, Float.TYPE, Float.TYPE, Float.TYPE});
+
+    /** MINECRIFT SHADERSMOD **/
+    public static ReflectorClass ShadersMod_Shaders = new ReflectorClass("shadersmodcore.client.Shaders");
+    public static ReflectorMethod ShadersMod_Shaders_applyHandDepth = new ReflectorMethod(ShadersMod_Shaders, "applyHandDepth");
+    public static ReflectorMethod ShadersMod_Shaders_startup = new ReflectorMethod(ShadersMod_Shaders, "startup");
+    public static ReflectorMethod ShadersMod_Shaders_disableLightmap = new ReflectorMethod(ShadersMod_Shaders, "disableLightmap");
+    public static ReflectorMethod ShadersMod_Shaders_enableLightmap = new ReflectorMethod(ShadersMod_Shaders, "enableLightmap");
+    public static ReflectorMethod ShadersMod_Shaders_beginRender = new ReflectorMethod(ShadersMod_Shaders, "beginRender", new Class[] {Minecraft.class, Float.TYPE, Long.TYPE});
+    public static ReflectorMethod ShadersMod_Shaders_setViewport = new ReflectorMethod(ShadersMod_Shaders, "setViewport", new Class[] {Integer.TYPE, Integer.TYPE, Integer.TYPE, Integer.TYPE});
+    public static ReflectorMethod ShadersMod_Shaders_shouldRenderClouds = new ReflectorMethod(ShadersMod_Shaders, "shouldRenderClouds", new Class[] {GameSettings.class});
+    public static ReflectorMethod ShadersMod_Shaders_beginClouds = new ReflectorMethod(ShadersMod_Shaders, "beginClouds");
+    public static ReflectorMethod ShadersMod_Shaders_endClouds = new ReflectorMethod(ShadersMod_Shaders, "endClouds");
+    public static ReflectorMethod ShadersMod_Shaders_endRender = new ReflectorMethod(ShadersMod_Shaders, "endRender");
+    public static ReflectorMethod ShadersMod_Shaders_renderHand1 = new ReflectorMethod(ShadersMod_Shaders, "renderHand1", new Class[] {EntityRenderer.class, Float.TYPE, Integer.TYPE});
+    public static ReflectorMethod ShadersMod_Shaders_renderCompositeFinal = new ReflectorMethod(ShadersMod_Shaders, "renderCompositeFinal");
+    public static ReflectorMethod ShadersMod_Shaders_renderFPOverlay = new ReflectorMethod(ShadersMod_Shaders, "renderFPOverlay", new Class[] {EntityRenderer.class, Float.TYPE, Integer.TYPE});
+    public static ReflectorMethod ShadersMod_Shaders_beginWater = new ReflectorMethod(ShadersMod_Shaders, "beginWater");
+    public static ReflectorMethod ShadersMod_Shaders_endWater = new ReflectorMethod(ShadersMod_Shaders, "endWater");
+    public static ReflectorMethod ShadersMod_Shaders_clearRenderBuffer = new ReflectorMethod(ShadersMod_Shaders, "clearRenderBuffer");
+    public static ReflectorMethod ShadersMod_Shaders_setCamera = new ReflectorMethod(ShadersMod_Shaders, "setCamera", new Class[] {Float.TYPE});
+    public static ReflectorMethod ShadersMod_Shaders_beginSky = new ReflectorMethod(ShadersMod_Shaders, "beginSky");
+    public static ReflectorMethod ShadersMod_Shaders_endSky = new ReflectorMethod(ShadersMod_Shaders, "endSky");
+    public static ReflectorMethod ShadersMod_Shaders_beginUpdateChunks = new ReflectorMethod(ShadersMod_Shaders, "beginUpdateChunks");
+    public static ReflectorMethod ShadersMod_Shaders_endUpdateChunks = new ReflectorMethod(ShadersMod_Shaders, "endUpdateChunks");
+    public static ReflectorMethod ShadersMod_Shaders_beginTerrain = new ReflectorMethod(ShadersMod_Shaders, "beginTerrain");
+    public static ReflectorMethod ShadersMod_Shaders_endTerrain = new ReflectorMethod(ShadersMod_Shaders, "endTerrain");
+    public static ReflectorMethod ShadersMod_Shaders_beginLitParticles = new ReflectorMethod(ShadersMod_Shaders, "beginLitParticles");
+    public static ReflectorMethod ShadersMod_Shaders_beginParticles = new ReflectorMethod(ShadersMod_Shaders, "beginParticles");
+    public static ReflectorMethod ShadersMod_Shaders_endParticles = new ReflectorMethod(ShadersMod_Shaders, "endParticles");
+    public static ReflectorMethod ShadersMod_Shaders_beginWeather = new ReflectorMethod(ShadersMod_Shaders, "beginWeather");
+    public static ReflectorMethod ShadersMod_Shaders_endWeather = new ReflectorMethod(ShadersMod_Shaders, "endWeather");
+    public static ReflectorMethod ShadersMod_Shaders_renderHand0 = new ReflectorMethod(ShadersMod_Shaders, "renderHand0", new Class[] {EntityRenderer.class, Float.TYPE, Integer.TYPE});
+    public static ReflectorMethod ShadersMod_Shaders_preWater = new ReflectorMethod(ShadersMod_Shaders, "preWater");
+    public static ReflectorMethod ShadersMod_Shaders_setClearColor = new ReflectorMethod(ShadersMod_Shaders, "setClearColor", new Class[] {Float.TYPE, Float.TYPE, Float.TYPE, Float.TYPE});
+    public static ReflectorMethod ShadersMod_Shaders_sglFogi = new ReflectorMethod(ShadersMod_Shaders, "sglFogi", new Class[] {Integer.TYPE, Integer.TYPE});
+    public static ReflectorMethod ShadersMod_Shaders_setFogColor = new ReflectorMethod(ShadersMod_Shaders, "setFogColor", new Class[] {Float.TYPE, Float.TYPE, Float.TYPE});
+    public static ReflectorMethod ShadersMod_Shaders_beginEntities = new ReflectorMethod(ShadersMod_Shaders, "beginEntities");
+    public static ReflectorMethod ShadersMod_Shaders_endEntities = new ReflectorMethod(ShadersMod_Shaders, "endEntities");
+    public static ReflectorMethod ShadersMod_Shaders_nextEntity = new ReflectorMethod(ShadersMod_Shaders, "nextEntity");
+    public static ReflectorMethod ShadersMod_Shaders_beginBlockEntities = new ReflectorMethod(ShadersMod_Shaders, "beginBlockEntities");
+    public static ReflectorMethod ShadersMod_Shaders_endBlockEntities = new ReflectorMethod(ShadersMod_Shaders, "endBlockEntities");
+    public static ReflectorMethod ShadersMod_Shaders_enableTexture2D = new ReflectorMethod(ShadersMod_Shaders, "enableTexture2D");
+    public static ReflectorMethod ShadersMod_Shaders_disableTexture2D = new ReflectorMethod(ShadersMod_Shaders, "disableTexture2D");
+    public static ReflectorMethod ShadersMod_Shaders_enableFog = new ReflectorMethod(ShadersMod_Shaders, "enableFog");
+    public static ReflectorMethod ShadersMod_Shaders_disableFog = new ReflectorMethod(ShadersMod_Shaders, "disableFog");
+    public static ReflectorMethod ShadersMod_Shaders_setSkyColor = new ReflectorMethod(ShadersMod_Shaders, "setSkyColor", new Class[] {Vec3.class});
+    public static ReflectorMethod ShadersMod_Shaders_preSkyList = new ReflectorMethod(ShadersMod_Shaders, "preSkyList");
+    public static ReflectorMethod ShadersMod_Shaders_preCelestialRotate = new ReflectorMethod(ShadersMod_Shaders, "preCelestialRotate");
+    public static ReflectorMethod ShadersMod_Shaders_postCelestialRotate = new ReflectorMethod(ShadersMod_Shaders, "postCelestialRotate");
+    public static ReflectorMethod ShadersMod_Shaders_beginBlockDestroyProgress = new ReflectorMethod(ShadersMod_Shaders, "beginBlockDestroyProgress");
+    public static ReflectorMethod ShadersMod_Shaders_endBlockDestroyProgress = new ReflectorMethod(ShadersMod_Shaders, "endBlockDestroyProgress");
+
+    public static ReflectorMethod ShadersMod_Shaders_beginHand = new ReflectorMethod(ShadersMod_Shaders, "beginHand");
+    public static ReflectorMethod ShadersMod_Shaders_endHand = new ReflectorMethod(ShadersMod_Shaders, "endHand");
+    
+    public static ReflectorMethod ShadersMod_Shaders_beginFPOverlay = new ReflectorMethod(ShadersMod_Shaders, "beginFPOverlay");
+    public static ReflectorMethod ShadersMod_Shaders_endFPOverlay = new ReflectorMethod(ShadersMod_Shaders, "endFPOverlay");
+    public static ReflectorMethod ShadersMod_Shaders_readCenterDepth= new ReflectorMethod(ShadersMod_Shaders, "readCenterDepth");
+    
+    public static ReflectorClass ShadersMod_ShadersRender = new ReflectorClass("shadersmodcore.client.ShadersRender");
+    public static ReflectorMethod ShadersMod_ShadersRender_renderItemFP = new ReflectorMethod(ShadersMod_ShadersRender, "renderItemFP", new Class[] {ItemRenderer.class, Float.TYPE});
+    public static ReflectorMethod ShadersMod_ShadersRender_setFrustrumPosition = new ReflectorMethod(ShadersMod_ShadersRender, "setFrustrumPosition", new Class[] {Frustrum.class, Double.TYPE, Double.TYPE, Double.TYPE});
+    public static ReflectorMethod ShadersMod_ShadersRender_clipRenderersByFrustrum = new ReflectorMethod(ShadersMod_ShadersRender, "clipRenderersByFrustrum", new Class[] {RenderGlobal.class, Frustrum.class, Float.TYPE});
+    public static ReflectorField ShadersMod_Shaders_isShadowPass = new ReflectorField(ShadersMod_Shaders, "isShadowPass");
+    public static ReflectorMethod ShadersMod_Shaders_useProgram = new ReflectorMethod(ShadersMod_Shaders, "useProgram",  new Class[] {Integer.TYPE} );
+    public static ReflectorField ShadersMod_Shaders_activeProgram = new ReflectorField(ShadersMod_Shaders, "activeProgram");
+    public static ReflectorField ShadersMod_Shaders_dfb= new ReflectorField(ShadersMod_Shaders, "dfb");
+    public static ReflectorField ShadersMod_Shaders_dfbDepthTextures = new ReflectorField(ShadersMod_Shaders, "dfbDepthTextures");
+
+    public static ReflectorClass ShadersMod_GuiShaders = new ReflectorClass("shadersmodcore.client.GuiShaders");
+    public static ReflectorConstructor ShadersMod_GuiShaders_Constructor = new ReflectorConstructor(ShadersMod_GuiShaders, new Class[] {GuiScreen.class, GameSettings.class});
+    /** END MINECRIFT SHADERS MOD **/
+
+    // Various LWJGL hacks
+    public static ReflectorClass LWJGL_Controllers = new ReflectorClass(Controllers.class);
+    public static ReflectorField LWJGL_Controllers_created = new ReflectorField(LWJGL_Controllers, "created");
+    public static ReflectorClass JInput_ControllerEnv = new ReflectorClass("net.java.games.input.ControllerEnvironment");
+    public static ReflectorField JInput_ControllerEnv_defaultEnvironment = new ReflectorField(JInput_ControllerEnv, "defaultEnvironment");
+    public static ReflectorClass JInput_DefaultControllerEnv = new ReflectorClass("net.java.games.input.DefaultControllerEnvironment");
+    public static ReflectorConstructor JInput_DefaultControllerEnv_Constructor = new ReflectorConstructor(JInput_DefaultControllerEnv, new Class[] {});
+
+    // Initialise classes / methods that require Forge only class parameters...
+
+    public static Class Class_ForgePlayerInteractEvent_Action;
+    static {
+        try {
+            Class_ForgePlayerInteractEvent_Action = Class.forName("net.minecraftforge.event.entity.player.PlayerInteractEvent$Action");
+            ForgeEventFactory_onPlayerInteract = new ReflectorMethod(ForgeEventFactory, "onPlayerInteract", new Class[] {EntityPlayer.class, Class_ForgePlayerInteractEvent_Action, Integer.TYPE, Integer.TYPE, Integer.TYPE, Integer.TYPE, World.class});
+        } catch (ClassNotFoundException e) {
+            if (forgeExists()) {
+                e.printStackTrace();
+            }
+        }
+    }
+
+    public static boolean forgeExists()
+    {
+        return EventBus.exists();
+    }
+
+    public static boolean isInstanceOf(ReflectorClass clazz, Object obj)
+    {
+        return clazz.getTargetClass().isInstance(obj);
+    }
+
+    public static boolean shadersModExists()
+    {
+        return ShadersMod_Shaders.exists();
+    }
+    /** END MINECRIFT */
+
     public static void callVoid(ReflectorMethod refMethod, Object ... params)
     {
+    	
         try
         {
             Method e = refMethod.getTargetMethod();
@@ -150,7 +465,7 @@
             {
                 return;
             }
-
+            if(DEBUG) System.out.println("[Vivecraft Reflector] " +refMethod.getTargetMethod().getName());
             e.invoke((Object)null, params);
         }
         catch (Throwable var3)
@@ -161,6 +476,7 @@
 
     public static boolean callBoolean(ReflectorMethod refMethod, Object ... params)
     {
+    	
         try
         {
             Method e = refMethod.getTargetMethod();
@@ -171,6 +487,7 @@
             }
             else
             {
+            	if(DEBUG) System.out.println("[Vivecraft Reflector] " +refMethod.getTargetMethod().getName());
                 Boolean retVal = (Boolean)e.invoke((Object)null, params);
                 return retVal.booleanValue();
             }
@@ -184,6 +501,7 @@
 
     public static int callInt(ReflectorMethod refMethod, Object ... params)
     {
+    	
         try
         {
             Method e = refMethod.getTargetMethod();
@@ -194,6 +512,7 @@
             }
             else
             {
+            	if(DEBUG) System.out.println("[Vivecraft Reflector] " +refMethod.getTargetMethod().getName());
                 Integer retVal = (Integer)e.invoke((Object)null, params);
                 return retVal.intValue();
             }
@@ -207,6 +526,7 @@
 
     public static float callFloat(ReflectorMethod refMethod, Object ... params)
     {
+    	
         try
         {
             Method e = refMethod.getTargetMethod();
@@ -217,6 +537,7 @@
             }
             else
             {
+            	if(DEBUG) System.out.println("[Vivecraft Reflector] " +refMethod.getTargetMethod().getName());
                 Float retVal = (Float)e.invoke((Object)null, params);
                 return retVal.floatValue();
             }
@@ -230,6 +551,7 @@
 
     public static double callDouble(ReflectorMethod refMethod, Object ... params)
     {
+    	
         try
         {
             Method e = refMethod.getTargetMethod();
@@ -240,6 +562,7 @@
             }
             else
             {
+            	if(DEBUG) System.out.println("[Vivecraft Reflector] " +refMethod.getTargetMethod().getName());
                 Double retVal = (Double)e.invoke((Object)null, params);
                 return retVal.doubleValue();
             }
@@ -253,6 +576,7 @@
 
     public static String callString(ReflectorMethod refMethod, Object ... params)
     {
+
         try
         {
             Method e = refMethod.getTargetMethod();
@@ -263,6 +587,7 @@
             }
             else
             {
+            	if(DEBUG) System.out.println("[Vivecraft Reflector] " + refMethod.getTargetMethod().getName());
                 String retVal = (String)e.invoke((Object)null, params);
                 return retVal;
             }
@@ -276,6 +601,7 @@
 
     public static Object call(ReflectorMethod refMethod, Object ... params)
     {
+    	
         try
         {
             Method e = refMethod.getTargetMethod();
@@ -286,6 +612,7 @@
             }
             else
             {
+            	if(DEBUG) System.out.println("[Vivecraft Reflector] " + refMethod.getTargetMethod().getName());
                 Object retVal = e.invoke((Object)null, params);
                 return retVal;
             }
@@ -299,6 +626,7 @@
 
     public static void callVoid(Object obj, ReflectorMethod refMethod, Object ... params)
     {
+    	
         try
         {
             if (obj == null)
@@ -312,7 +640,7 @@
             {
                 return;
             }
-
+            if(DEBUG) System.out.println("[Vivecraft Reflector] " +refMethod.getTargetMethod().getName());
             e.invoke(obj, params);
         }
         catch (Throwable var4)
@@ -323,6 +651,7 @@
 
     public static boolean callBoolean(Object obj, ReflectorMethod refMethod, Object ... params)
     {
+    	
         try
         {
             Method e = refMethod.getTargetMethod();
@@ -333,6 +662,7 @@
             }
             else
             {
+            	if(DEBUG) System.out.println("[Vivecraft Reflector] " +refMethod.getTargetMethod().getName());
                 Boolean retVal = (Boolean)e.invoke(obj, params);
                 return retVal.booleanValue();
             }
@@ -346,6 +676,7 @@
 
     public static int callInt(Object obj, ReflectorMethod refMethod, Object ... params)
     {
+    	
         try
         {
             Method e = refMethod.getTargetMethod();
@@ -356,6 +687,7 @@
             }
             else
             {
+            	if(DEBUG) System.out.println("[Vivecraft Reflector] " +refMethod.getTargetMethod().getName());
                 Integer retVal = (Integer)e.invoke(obj, params);
                 return retVal.intValue();
             }
@@ -369,6 +701,7 @@
 
     public static float callFloat(Object obj, ReflectorMethod refMethod, Object ... params)
     {
+    	
         try
         {
             Method e = refMethod.getTargetMethod();
@@ -379,6 +712,7 @@
             }
             else
             {
+            	if(DEBUG) System.out.println("[Vivecraft Reflector] " +refMethod.getTargetMethod().getName());
                 Float retVal = (Float)e.invoke(obj, params);
                 return retVal.floatValue();
             }
@@ -392,6 +726,7 @@
 
     public static double callDouble(Object obj, ReflectorMethod refMethod, Object ... params)
     {
+    	
         try
         {
             Method e = refMethod.getTargetMethod();
@@ -402,6 +737,7 @@
             }
             else
             {
+            	if(DEBUG) System.out.println("[Vivecraft Reflector] " +refMethod.getTargetMethod().getName());
                 Double retVal = (Double)e.invoke(obj, params);
                 return retVal.doubleValue();
             }
@@ -415,6 +751,7 @@
 
     public static String callString(Object obj, ReflectorMethod refMethod, Object ... params)
     {
+    	
         try
         {
             Method e = refMethod.getTargetMethod();
@@ -425,6 +762,7 @@
             }
             else
             {
+            	if(DEBUG) System.out.println("[Vivecraft Reflector] " +refMethod.getTargetMethod().getName());
                 String retVal = (String)e.invoke(obj, params);
                 return retVal;
             }
@@ -438,6 +776,7 @@
 
     public static Object call(Object obj, ReflectorMethod refMethod, Object ... params)
     {
+    	
         try
         {
             Method e = refMethod.getTargetMethod();
@@ -448,6 +787,7 @@
             }
             else
             {
+            	if(DEBUG) System.out.println("[Vivecraft Reflector] " +refMethod.getTargetMethod().getName());
                 Object retVal = e.invoke(obj, params);
                 return retVal;
             }
